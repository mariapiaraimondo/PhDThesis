/* This file was generated by SableCC (http://www.sablecc.org/). */

package plantuml.analysis;

import java.util.*;
import plantuml.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPBcseqdiag().apply(this);
        outStart(node);
    }

    public void inASimpleBcseqdiag(ASimpleBcseqdiag node)
    {
        defaultIn(node);
    }

    public void outASimpleBcseqdiag(ASimpleBcseqdiag node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleBcseqdiag(ASimpleBcseqdiag node)
    {
        inASimpleBcseqdiag(node);
        if(node.getEnddiagramBlock() != null)
        {
            node.getEnddiagramBlock().apply(this);
        }
        {
            List<PItem> copy = new ArrayList<PItem>(node.getItem());
            Collections.reverse(copy);
            for(PItem e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getStartdiagramBlock() != null)
        {
            node.getStartdiagramBlock().apply(this);
        }
        outASimpleBcseqdiag(node);
    }

    public void inASimpleStartdiagramBlock(ASimpleStartdiagramBlock node)
    {
        defaultIn(node);
    }

    public void outASimpleStartdiagramBlock(ASimpleStartdiagramBlock node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleStartdiagramBlock(ASimpleStartdiagramBlock node)
    {
        inASimpleStartdiagramBlock(node);
        {
            List<TNewLine> copy = new ArrayList<TNewLine>(node.getNewLine());
            Collections.reverse(copy);
            for(TNewLine e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getStartdiagramTok() != null)
        {
            node.getStartdiagramTok().apply(this);
        }
        outASimpleStartdiagramBlock(node);
    }

    public void inASimpleEnddiagramBlock(ASimpleEnddiagramBlock node)
    {
        defaultIn(node);
    }

    public void outASimpleEnddiagramBlock(ASimpleEnddiagramBlock node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleEnddiagramBlock(ASimpleEnddiagramBlock node)
    {
        inASimpleEnddiagramBlock(node);
        if(node.getEnddiagramTok() != null)
        {
            node.getEnddiagramTok().apply(this);
        }
        outASimpleEnddiagramBlock(node);
    }

    public void inASimpleItem(ASimpleItem node)
    {
        defaultIn(node);
    }

    public void outASimpleItem(ASimpleItem node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleItem(ASimpleItem node)
    {
        inASimpleItem(node);
        {
            List<TNewLine> copy = new ArrayList<TNewLine>(node.getNewLine());
            Collections.reverse(copy);
            for(TNewLine e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getItemCore() != null)
        {
            node.getItemCore().apply(this);
        }
        outASimpleItem(node);
    }

    public void inAPartItemCore(APartItemCore node)
    {
        defaultIn(node);
    }

    public void outAPartItemCore(APartItemCore node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPartItemCore(APartItemCore node)
    {
        inAPartItemCore(node);
        if(node.getParticipant() != null)
        {
            node.getParticipant().apply(this);
        }
        outAPartItemCore(node);
    }

    public void inAPartNoteItemCore(APartNoteItemCore node)
    {
        defaultIn(node);
    }

    public void outAPartNoteItemCore(APartNoteItemCore node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPartNoteItemCore(APartNoteItemCore node)
    {
        inAPartNoteItemCore(node);
        if(node.getParticipantNote() != null)
        {
            node.getParticipantNote().apply(this);
        }
        outAPartNoteItemCore(node);
    }

    public void inAMsgItemCore(AMsgItemCore node)
    {
        defaultIn(node);
    }

    public void outAMsgItemCore(AMsgItemCore node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMsgItemCore(AMsgItemCore node)
    {
        inAMsgItemCore(node);
        if(node.getMessage() != null)
        {
            node.getMessage().apply(this);
        }
        outAMsgItemCore(node);
    }

    public void inAMsgNoteItemCore(AMsgNoteItemCore node)
    {
        defaultIn(node);
    }

    public void outAMsgNoteItemCore(AMsgNoteItemCore node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMsgNoteItemCore(AMsgNoteItemCore node)
    {
        inAMsgNoteItemCore(node);
        if(node.getMessageNote() != null)
        {
            node.getMessageNote().apply(this);
        }
        outAMsgNoteItemCore(node);
    }

    public void inAMsgNoteLinkItemCore(AMsgNoteLinkItemCore node)
    {
        defaultIn(node);
    }

    public void outAMsgNoteLinkItemCore(AMsgNoteLinkItemCore node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMsgNoteLinkItemCore(AMsgNoteLinkItemCore node)
    {
        inAMsgNoteLinkItemCore(node);
        if(node.getMsgnoteLink() != null)
        {
            node.getMsgnoteLink().apply(this);
        }
        outAMsgNoteLinkItemCore(node);
    }

    public void inASimpleParticipant(ASimpleParticipant node)
    {
        defaultIn(node);
    }

    public void outASimpleParticipant(ASimpleParticipant node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleParticipant(ASimpleParticipant node)
    {
        inASimpleParticipant(node);
        if(node.getStereotype() != null)
        {
            node.getStereotype().apply(this);
        }
        if(node.getPartAlias() != null)
        {
            node.getPartAlias().apply(this);
        }
        if(node.getQuot2() != null)
        {
            node.getQuot2().apply(this);
        }
        if(node.getParticipantName() != null)
        {
            node.getParticipantName().apply(this);
        }
        if(node.getQuot1() != null)
        {
            node.getQuot1().apply(this);
        }
        if(node.getParticipantTok() != null)
        {
            node.getParticipantTok().apply(this);
        }
        outASimpleParticipant(node);
    }

    public void inASimpleParticipantName(ASimpleParticipantName node)
    {
        defaultIn(node);
    }

    public void outASimpleParticipantName(ASimpleParticipantName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleParticipantName(ASimpleParticipantName node)
    {
        inASimpleParticipantName(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outASimpleParticipantName(node);
    }

    public void inASimplePartAlias(ASimplePartAlias node)
    {
        defaultIn(node);
    }

    public void outASimplePartAlias(ASimplePartAlias node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimplePartAlias(ASimplePartAlias node)
    {
        inASimplePartAlias(node);
        if(node.getPartAliasName() != null)
        {
            node.getPartAliasName().apply(this);
        }
        if(node.getAliasTok() != null)
        {
            node.getAliasTok().apply(this);
        }
        outASimplePartAlias(node);
    }

    public void inASimplePartAliasName(ASimplePartAliasName node)
    {
        defaultIn(node);
    }

    public void outASimplePartAliasName(ASimplePartAliasName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimplePartAliasName(ASimplePartAliasName node)
    {
        inASimplePartAliasName(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outASimplePartAliasName(node);
    }

    public void inASimpleStereotype(ASimpleStereotype node)
    {
        defaultIn(node);
    }

    public void outASimpleStereotype(ASimpleStereotype node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleStereotype(ASimpleStereotype node)
    {
        inASimpleStereotype(node);
        if(node.getRDAng() != null)
        {
            node.getRDAng().apply(this);
        }
        if(node.getStereotypeTok() != null)
        {
            node.getStereotypeTok().apply(this);
        }
        if(node.getLDAng() != null)
        {
            node.getLDAng().apply(this);
        }
        outASimpleStereotype(node);
    }

    public void inASimpleParticipantNote(ASimpleParticipantNote node)
    {
        defaultIn(node);
    }

    public void outASimpleParticipantNote(ASimpleParticipantNote node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleParticipantNote(ASimpleParticipantNote node)
    {
        inASimpleParticipantNote(node);
        if(node.getEnding() != null)
        {
            node.getEnding().apply(this);
        }
        if(node.getEndTok() != null)
        {
            node.getEndTok().apply(this);
        }
        if(node.getSecondline() != null)
        {
            node.getSecondline().apply(this);
        }
        if(node.getContent() != null)
        {
            node.getContent().apply(this);
        }
        if(node.getFirstline() != null)
        {
            node.getFirstline().apply(this);
        }
        if(node.getParticipantRef() != null)
        {
            node.getParticipantRef().apply(this);
        }
        if(node.getPosition() != null)
        {
            node.getPosition().apply(this);
        }
        if(node.getStarting() != null)
        {
            node.getStarting().apply(this);
        }
        outASimpleParticipantNote(node);
    }

    public void inASimpleParticipantRef(ASimpleParticipantRef node)
    {
        defaultIn(node);
    }

    public void outASimpleParticipantRef(ASimpleParticipantRef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleParticipantRef(ASimpleParticipantRef node)
    {
        inASimpleParticipantRef(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outASimpleParticipantRef(node);
    }

    public void inALeftPositionPosition(ALeftPositionPosition node)
    {
        defaultIn(node);
    }

    public void outALeftPositionPosition(ALeftPositionPosition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALeftPositionPosition(ALeftPositionPosition node)
    {
        inALeftPositionPosition(node);
        if(node.getLeftTok() != null)
        {
            node.getLeftTok().apply(this);
        }
        outALeftPositionPosition(node);
    }

    public void inAOverPositionPosition(AOverPositionPosition node)
    {
        defaultIn(node);
    }

    public void outAOverPositionPosition(AOverPositionPosition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOverPositionPosition(AOverPositionPosition node)
    {
        inAOverPositionPosition(node);
        if(node.getOverTok() != null)
        {
            node.getOverTok().apply(this);
        }
        outAOverPositionPosition(node);
    }

    public void inARightPositionPosition(ARightPositionPosition node)
    {
        defaultIn(node);
    }

    public void outARightPositionPosition(ARightPositionPosition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARightPositionPosition(ARightPositionPosition node)
    {
        inARightPositionPosition(node);
        if(node.getRightTok() != null)
        {
            node.getRightTok().apply(this);
        }
        outARightPositionPosition(node);
    }

    public void inASimpleMessage(ASimpleMessage node)
    {
        defaultIn(node);
    }

    public void outASimpleMessage(ASimpleMessage node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleMessage(ASimpleMessage node)
    {
        inASimpleMessage(node);
        if(node.getMessageName() != null)
        {
            node.getMessageName().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getReceiver() != null)
        {
            node.getReceiver().apply(this);
        }
        if(node.getArrow() != null)
        {
            node.getArrow().apply(this);
        }
        if(node.getSender() != null)
        {
            node.getSender().apply(this);
        }
        outASimpleMessage(node);
    }

    public void inASimpleSender(ASimpleSender node)
    {
        defaultIn(node);
    }

    public void outASimpleSender(ASimpleSender node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleSender(ASimpleSender node)
    {
        inASimpleSender(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outASimpleSender(node);
    }

    public void inASimpleReceiver(ASimpleReceiver node)
    {
        defaultIn(node);
    }

    public void outASimpleReceiver(ASimpleReceiver node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleReceiver(ASimpleReceiver node)
    {
        inASimpleReceiver(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outASimpleReceiver(node);
    }

    public void inASimpleMessageNote(ASimpleMessageNote node)
    {
        defaultIn(node);
    }

    public void outASimpleMessageNote(ASimpleMessageNote node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleMessageNote(ASimpleMessageNote node)
    {
        inASimpleMessageNote(node);
        if(node.getEnding() != null)
        {
            node.getEnding().apply(this);
        }
        if(node.getEndTok() != null)
        {
            node.getEndTok().apply(this);
        }
        if(node.getSecondline() != null)
        {
            node.getSecondline().apply(this);
        }
        if(node.getContent() != null)
        {
            node.getContent().apply(this);
        }
        if(node.getFirstline() != null)
        {
            node.getFirstline().apply(this);
        }
        if(node.getAliasNoteBlock() != null)
        {
            node.getAliasNoteBlock().apply(this);
        }
        if(node.getPosition() != null)
        {
            node.getPosition().apply(this);
        }
        if(node.getStarting() != null)
        {
            node.getStarting().apply(this);
        }
        outASimpleMessageNote(node);
    }

    public void inASimpleAliasNoteBlock(ASimpleAliasNoteBlock node)
    {
        defaultIn(node);
    }

    public void outASimpleAliasNoteBlock(ASimpleAliasNoteBlock node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleAliasNoteBlock(ASimpleAliasNoteBlock node)
    {
        inASimpleAliasNoteBlock(node);
        if(node.getAliasNote() != null)
        {
            node.getAliasNote().apply(this);
        }
        if(node.getAliasTok() != null)
        {
            node.getAliasTok().apply(this);
        }
        outASimpleAliasNoteBlock(node);
    }

    public void inASimpleAliasNote(ASimpleAliasNote node)
    {
        defaultIn(node);
    }

    public void outASimpleAliasNote(ASimpleAliasNote node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleAliasNote(ASimpleAliasNote node)
    {
        inASimpleAliasNote(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outASimpleAliasNote(node);
    }

    public void inASimpleMessageName(ASimpleMessageName node)
    {
        defaultIn(node);
    }

    public void outASimpleMessageName(ASimpleMessageName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleMessageName(ASimpleMessageName node)
    {
        inASimpleMessageName(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outASimpleMessageName(node);
    }

    public void inASimpleMessageRef(ASimpleMessageRef node)
    {
        defaultIn(node);
    }

    public void outASimpleMessageRef(ASimpleMessageRef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleMessageRef(ASimpleMessageRef node)
    {
        inASimpleMessageRef(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outASimpleMessageRef(node);
    }

    public void inASimpleMsgnoteLink(ASimpleMsgnoteLink node)
    {
        defaultIn(node);
    }

    public void outASimpleMsgnoteLink(ASimpleMsgnoteLink node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleMsgnoteLink(ASimpleMsgnoteLink node)
    {
        inASimpleMsgnoteLink(node);
        if(node.getNoteRef() != null)
        {
            node.getNoteRef().apply(this);
        }
        if(node.getMsgLink() != null)
        {
            node.getMsgLink().apply(this);
        }
        if(node.getQuot2() != null)
        {
            node.getQuot2().apply(this);
        }
        if(node.getMessageRef() != null)
        {
            node.getMessageRef().apply(this);
        }
        if(node.getQuot1() != null)
        {
            node.getQuot1().apply(this);
        }
        outASimpleMsgnoteLink(node);
    }

    public void inASimpleContent(ASimpleContent node)
    {
        defaultIn(node);
    }

    public void outASimpleContent(ASimpleContent node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleContent(ASimpleContent node)
    {
        inASimpleContent(node);
        if(node.getOpaqueexpr() != null)
        {
            node.getOpaqueexpr().apply(this);
        }
        outASimpleContent(node);
    }

    public void inASimpleNoteRef(ASimpleNoteRef node)
    {
        defaultIn(node);
    }

    public void outASimpleNoteRef(ASimpleNoteRef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleNoteRef(ASimpleNoteRef node)
    {
        inASimpleNoteRef(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outASimpleNoteRef(node);
    }

    public void inASimpleName(ASimpleName node)
    {
        defaultIn(node);
    }

    public void outASimpleName(ASimpleName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleName(ASimpleName node)
    {
        inASimpleName(node);
        if(node.getCharSeq() != null)
        {
            node.getCharSeq().apply(this);
        }
        outASimpleName(node);
    }
}
