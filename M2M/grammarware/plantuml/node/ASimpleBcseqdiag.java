/* This file was generated by SableCC (http://www.sablecc.org/). */

package plantuml.node;

import java.util.*;
import plantuml.analysis.*;

@SuppressWarnings("nls")
public final class ASimpleBcseqdiag extends PBcseqdiag
{
    private PStartdiagramBlock _startdiagramBlock_;
    private final LinkedList<PItem> _item_ = new LinkedList<PItem>();
    private PEnddiagramBlock _enddiagramBlock_;

    public ASimpleBcseqdiag()
    {
        // Constructor
    }

    public ASimpleBcseqdiag(
        @SuppressWarnings("hiding") PStartdiagramBlock _startdiagramBlock_,
        @SuppressWarnings("hiding") List<?> _item_,
        @SuppressWarnings("hiding") PEnddiagramBlock _enddiagramBlock_)
    {
        // Constructor
        setStartdiagramBlock(_startdiagramBlock_);

        setItem(_item_);

        setEnddiagramBlock(_enddiagramBlock_);

    }

    @Override
    public Object clone()
    {
        return new ASimpleBcseqdiag(
            cloneNode(this._startdiagramBlock_),
            cloneList(this._item_),
            cloneNode(this._enddiagramBlock_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASimpleBcseqdiag(this);
    }

    public PStartdiagramBlock getStartdiagramBlock()
    {
        return this._startdiagramBlock_;
    }

    public void setStartdiagramBlock(PStartdiagramBlock node)
    {
        if(this._startdiagramBlock_ != null)
        {
            this._startdiagramBlock_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._startdiagramBlock_ = node;
    }

    public LinkedList<PItem> getItem()
    {
        return this._item_;
    }

    public void setItem(List<?> list)
    {
        for(PItem e : this._item_)
        {
            e.parent(null);
        }
        this._item_.clear();

        for(Object obj_e : list)
        {
            PItem e = (PItem) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._item_.add(e);
        }
    }

    public PEnddiagramBlock getEnddiagramBlock()
    {
        return this._enddiagramBlock_;
    }

    public void setEnddiagramBlock(PEnddiagramBlock node)
    {
        if(this._enddiagramBlock_ != null)
        {
            this._enddiagramBlock_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._enddiagramBlock_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._startdiagramBlock_)
            + toString(this._item_)
            + toString(this._enddiagramBlock_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._startdiagramBlock_ == child)
        {
            this._startdiagramBlock_ = null;
            return;
        }

        if(this._item_.remove(child))
        {
            return;
        }

        if(this._enddiagramBlock_ == child)
        {
            this._enddiagramBlock_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._startdiagramBlock_ == oldChild)
        {
            setStartdiagramBlock((PStartdiagramBlock) newChild);
            return;
        }

        for(ListIterator<PItem> i = this._item_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PItem) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._enddiagramBlock_ == oldChild)
        {
            setEnddiagramBlock((PEnddiagramBlock) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
