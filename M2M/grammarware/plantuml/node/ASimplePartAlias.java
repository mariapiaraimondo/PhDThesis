/* This file was generated by SableCC (http://www.sablecc.org/). */

package plantuml.node;

import plantuml.analysis.*;

@SuppressWarnings("nls")
public final class ASimplePartAlias extends PPartAlias
{
    private TAliasTok _aliasTok_;
    private PPartAliasName _partAliasName_;

    public ASimplePartAlias()
    {
        // Constructor
    }

    public ASimplePartAlias(
        @SuppressWarnings("hiding") TAliasTok _aliasTok_,
        @SuppressWarnings("hiding") PPartAliasName _partAliasName_)
    {
        // Constructor
        setAliasTok(_aliasTok_);

        setPartAliasName(_partAliasName_);

    }

    @Override
    public Object clone()
    {
        return new ASimplePartAlias(
            cloneNode(this._aliasTok_),
            cloneNode(this._partAliasName_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASimplePartAlias(this);
    }

    public TAliasTok getAliasTok()
    {
        return this._aliasTok_;
    }

    public void setAliasTok(TAliasTok node)
    {
        if(this._aliasTok_ != null)
        {
            this._aliasTok_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._aliasTok_ = node;
    }

    public PPartAliasName getPartAliasName()
    {
        return this._partAliasName_;
    }

    public void setPartAliasName(PPartAliasName node)
    {
        if(this._partAliasName_ != null)
        {
            this._partAliasName_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._partAliasName_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._aliasTok_)
            + toString(this._partAliasName_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._aliasTok_ == child)
        {
            this._aliasTok_ = null;
            return;
        }

        if(this._partAliasName_ == child)
        {
            this._partAliasName_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._aliasTok_ == oldChild)
        {
            setAliasTok((TAliasTok) newChild);
            return;
        }

        if(this._partAliasName_ == oldChild)
        {
            setPartAliasName((PPartAliasName) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
