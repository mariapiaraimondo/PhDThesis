/* This file was generated by SableCC (http://www.sablecc.org/). */

package plantuml.node;

import plantuml.analysis.*;

@SuppressWarnings("nls")
public final class ASimpleAliasNoteBlock extends PAliasNoteBlock
{
    private TAliasTok _aliasTok_;
    private PAliasNote _aliasNote_;

    public ASimpleAliasNoteBlock()
    {
        // Constructor
    }

    public ASimpleAliasNoteBlock(
        @SuppressWarnings("hiding") TAliasTok _aliasTok_,
        @SuppressWarnings("hiding") PAliasNote _aliasNote_)
    {
        // Constructor
        setAliasTok(_aliasTok_);

        setAliasNote(_aliasNote_);

    }

    @Override
    public Object clone()
    {
        return new ASimpleAliasNoteBlock(
            cloneNode(this._aliasTok_),
            cloneNode(this._aliasNote_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASimpleAliasNoteBlock(this);
    }

    public TAliasTok getAliasTok()
    {
        return this._aliasTok_;
    }

    public void setAliasTok(TAliasTok node)
    {
        if(this._aliasTok_ != null)
        {
            this._aliasTok_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._aliasTok_ = node;
    }

    public PAliasNote getAliasNote()
    {
        return this._aliasNote_;
    }

    public void setAliasNote(PAliasNote node)
    {
        if(this._aliasNote_ != null)
        {
            this._aliasNote_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._aliasNote_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._aliasTok_)
            + toString(this._aliasNote_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._aliasTok_ == child)
        {
            this._aliasTok_ = null;
            return;
        }

        if(this._aliasNote_ == child)
        {
            this._aliasNote_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._aliasTok_ == oldChild)
        {
            setAliasTok((TAliasTok) newChild);
            return;
        }

        if(this._aliasNote_ == oldChild)
        {
            setAliasNote((PAliasNote) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
