/* This file was generated by SableCC (http://www.sablecc.org/). */

package plantuml.node;

import plantuml.analysis.*;

@SuppressWarnings("nls")
public final class ASimpleMessage extends PMessage
{
    private PSender _sender_;
    private TArrow _arrow_;
    private PReceiver _receiver_;
    private TColon _colon_;
    private PMessageName _messageName_;

    public ASimpleMessage()
    {
        // Constructor
    }

    public ASimpleMessage(
        @SuppressWarnings("hiding") PSender _sender_,
        @SuppressWarnings("hiding") TArrow _arrow_,
        @SuppressWarnings("hiding") PReceiver _receiver_,
        @SuppressWarnings("hiding") TColon _colon_,
        @SuppressWarnings("hiding") PMessageName _messageName_)
    {
        // Constructor
        setSender(_sender_);

        setArrow(_arrow_);

        setReceiver(_receiver_);

        setColon(_colon_);

        setMessageName(_messageName_);

    }

    @Override
    public Object clone()
    {
        return new ASimpleMessage(
            cloneNode(this._sender_),
            cloneNode(this._arrow_),
            cloneNode(this._receiver_),
            cloneNode(this._colon_),
            cloneNode(this._messageName_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASimpleMessage(this);
    }

    public PSender getSender()
    {
        return this._sender_;
    }

    public void setSender(PSender node)
    {
        if(this._sender_ != null)
        {
            this._sender_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._sender_ = node;
    }

    public TArrow getArrow()
    {
        return this._arrow_;
    }

    public void setArrow(TArrow node)
    {
        if(this._arrow_ != null)
        {
            this._arrow_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._arrow_ = node;
    }

    public PReceiver getReceiver()
    {
        return this._receiver_;
    }

    public void setReceiver(PReceiver node)
    {
        if(this._receiver_ != null)
        {
            this._receiver_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._receiver_ = node;
    }

    public TColon getColon()
    {
        return this._colon_;
    }

    public void setColon(TColon node)
    {
        if(this._colon_ != null)
        {
            this._colon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._colon_ = node;
    }

    public PMessageName getMessageName()
    {
        return this._messageName_;
    }

    public void setMessageName(PMessageName node)
    {
        if(this._messageName_ != null)
        {
            this._messageName_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._messageName_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._sender_)
            + toString(this._arrow_)
            + toString(this._receiver_)
            + toString(this._colon_)
            + toString(this._messageName_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._sender_ == child)
        {
            this._sender_ = null;
            return;
        }

        if(this._arrow_ == child)
        {
            this._arrow_ = null;
            return;
        }

        if(this._receiver_ == child)
        {
            this._receiver_ = null;
            return;
        }

        if(this._colon_ == child)
        {
            this._colon_ = null;
            return;
        }

        if(this._messageName_ == child)
        {
            this._messageName_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._sender_ == oldChild)
        {
            setSender((PSender) newChild);
            return;
        }

        if(this._arrow_ == oldChild)
        {
            setArrow((TArrow) newChild);
            return;
        }

        if(this._receiver_ == oldChild)
        {
            setReceiver((PReceiver) newChild);
            return;
        }

        if(this._colon_ == oldChild)
        {
            setColon((TColon) newChild);
            return;
        }

        if(this._messageName_ == oldChild)
        {
            setMessageName((PMessageName) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
