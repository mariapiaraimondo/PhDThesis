/* This file was generated by SableCC (http://www.sablecc.org/). */

package plantuml.parser;

import plantuml.lexer.*;
import plantuml.node.*;
import plantuml.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PBcseqdiag node1 = (PBcseqdiag) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AAsimplebcseqdiag1Bcseqdiag */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce AAsimplebcseqdiag2Bcseqdiag */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list, false);
            }
            break;
            case 2: /* reduce ASimpleStartdiagramBlock */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list, false);
            }
            break;
            case 3: /* reduce ASimpleEnddiagramBlock */
            {
                ArrayList<Object> list = new3();
                push(goTo(2), list, false);
            }
            break;
            case 4: /* reduce ASimpleItem */
            {
                ArrayList<Object> list = new4();
                push(goTo(3), list, false);
            }
            break;
            case 5: /* reduce APartItemCore */
            {
                ArrayList<Object> list = new5();
                push(goTo(4), list, false);
            }
            break;
            case 6: /* reduce APartNoteItemCore */
            {
                ArrayList<Object> list = new6();
                push(goTo(4), list, false);
            }
            break;
            case 7: /* reduce AMsgItemCore */
            {
                ArrayList<Object> list = new7();
                push(goTo(4), list, false);
            }
            break;
            case 8: /* reduce AMsgNoteItemCore */
            {
                ArrayList<Object> list = new8();
                push(goTo(4), list, false);
            }
            break;
            case 9: /* reduce AMsgNoteLinkItemCore */
            {
                ArrayList<Object> list = new9();
                push(goTo(4), list, false);
            }
            break;
            case 10: /* reduce AAsimpleparticipant1Participant */
            {
                ArrayList<Object> list = new10();
                push(goTo(5), list, false);
            }
            break;
            case 11: /* reduce AAsimpleparticipant2Participant */
            {
                ArrayList<Object> list = new11();
                push(goTo(5), list, false);
            }
            break;
            case 12: /* reduce AAsimpleparticipant3Participant */
            {
                ArrayList<Object> list = new12();
                push(goTo(5), list, false);
            }
            break;
            case 13: /* reduce AAsimpleparticipant4Participant */
            {
                ArrayList<Object> list = new13();
                push(goTo(5), list, false);
            }
            break;
            case 14: /* reduce ASimpleParticipantName */
            {
                ArrayList<Object> list = new14();
                push(goTo(6), list, false);
            }
            break;
            case 15: /* reduce ASimplePartAlias */
            {
                ArrayList<Object> list = new15();
                push(goTo(7), list, false);
            }
            break;
            case 16: /* reduce ASimplePartAliasName */
            {
                ArrayList<Object> list = new16();
                push(goTo(8), list, false);
            }
            break;
            case 17: /* reduce ASimpleStereotype */
            {
                ArrayList<Object> list = new17();
                push(goTo(9), list, false);
            }
            break;
            case 18: /* reduce ASimpleParticipantNote */
            {
                ArrayList<Object> list = new18();
                push(goTo(10), list, false);
            }
            break;
            case 19: /* reduce ASimpleParticipantRef */
            {
                ArrayList<Object> list = new19();
                push(goTo(11), list, false);
            }
            break;
            case 20: /* reduce ALeftPositionPosition */
            {
                ArrayList<Object> list = new20();
                push(goTo(12), list, false);
            }
            break;
            case 21: /* reduce AOverPositionPosition */
            {
                ArrayList<Object> list = new21();
                push(goTo(12), list, false);
            }
            break;
            case 22: /* reduce ARightPositionPosition */
            {
                ArrayList<Object> list = new22();
                push(goTo(12), list, false);
            }
            break;
            case 23: /* reduce ASimpleMessage */
            {
                ArrayList<Object> list = new23();
                push(goTo(13), list, false);
            }
            break;
            case 24: /* reduce ASimpleSender */
            {
                ArrayList<Object> list = new24();
                push(goTo(14), list, false);
            }
            break;
            case 25: /* reduce ASimpleReceiver */
            {
                ArrayList<Object> list = new25();
                push(goTo(15), list, false);
            }
            break;
            case 26: /* reduce ASimpleMessageNote */
            {
                ArrayList<Object> list = new26();
                push(goTo(16), list, false);
            }
            break;
            case 27: /* reduce ASimpleAliasNoteBlock */
            {
                ArrayList<Object> list = new27();
                push(goTo(17), list, false);
            }
            break;
            case 28: /* reduce ASimpleAliasNote */
            {
                ArrayList<Object> list = new28();
                push(goTo(18), list, false);
            }
            break;
            case 29: /* reduce ASimpleMessageName */
            {
                ArrayList<Object> list = new29();
                push(goTo(19), list, false);
            }
            break;
            case 30: /* reduce ASimpleMessageRef */
            {
                ArrayList<Object> list = new30();
                push(goTo(20), list, false);
            }
            break;
            case 31: /* reduce ASimpleMsgnoteLink */
            {
                ArrayList<Object> list = new31();
                push(goTo(21), list, false);
            }
            break;
            case 32: /* reduce ASimpleContent */
            {
                ArrayList<Object> list = new32();
                push(goTo(22), list, false);
            }
            break;
            case 33: /* reduce ASimpleNoteRef */
            {
                ArrayList<Object> list = new33();
                push(goTo(23), list, false);
            }
            break;
            case 34: /* reduce ASimpleName */
            {
                ArrayList<Object> list = new34();
                push(goTo(24), list, false);
            }
            break;
            case 35: /* reduce ATerminal$Item */
            {
                ArrayList<Object> list = new35();
                push(goTo(25), list, true);
            }
            break;
            case 36: /* reduce ANonTerminal$Item */
            {
                ArrayList<Object> list = new36();
                push(goTo(25), list, true);
            }
            break;
            case 37: /* reduce ATerminal$NewLine */
            {
                ArrayList<Object> list = new37();
                push(goTo(26), list, true);
            }
            break;
            case 38: /* reduce ANonTerminal$NewLine */
            {
                ArrayList<Object> list = new38();
                push(goTo(26), list, true);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AAsimplebcseqdiag1Bcseqdiag */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBcseqdiag pbcseqdiagNode1;
        {
            // Block
        PStartdiagramBlock pstartdiagramblockNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PEnddiagramBlock penddiagramblockNode4;
        pstartdiagramblockNode2 = (PStartdiagramBlock)nodeArrayList1.get(0);
        {
            // Block
        }
        penddiagramblockNode4 = (PEnddiagramBlock)nodeArrayList2.get(0);

        pbcseqdiagNode1 = new ASimpleBcseqdiag(pstartdiagramblockNode2, listNode3, penddiagramblockNode4);
        }
	nodeList.add(pbcseqdiagNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAsimplebcseqdiag2Bcseqdiag */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBcseqdiag pbcseqdiagNode1;
        {
            // Block
        PStartdiagramBlock pstartdiagramblockNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PEnddiagramBlock penddiagramblockNode5;
        pstartdiagramblockNode2 = (PStartdiagramBlock)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        penddiagramblockNode5 = (PEnddiagramBlock)nodeArrayList3.get(0);

        pbcseqdiagNode1 = new ASimpleBcseqdiag(pstartdiagramblockNode2, listNode4, penddiagramblockNode5);
        }
	nodeList.add(pbcseqdiagNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce ASimpleStartdiagramBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStartdiagramBlock pstartdiagramblockNode1;
        {
            // Block
        TStartdiagramTok tstartdiagramtokNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tstartdiagramtokNode2 = (TStartdiagramTok)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pstartdiagramblockNode1 = new ASimpleStartdiagramBlock(tstartdiagramtokNode2, listNode4);
        }
	nodeList.add(pstartdiagramblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce ASimpleEnddiagramBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEnddiagramBlock penddiagramblockNode1;
        {
            // Block
        TEnddiagramTok tenddiagramtokNode2;
        tenddiagramtokNode2 = (TEnddiagramTok)nodeArrayList1.get(0);

        penddiagramblockNode1 = new ASimpleEnddiagramBlock(tenddiagramtokNode2);
        }
	nodeList.add(penddiagramblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce ASimpleItem */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PItem pitemNode1;
        {
            // Block
        PItemCore pitemcoreNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pitemcoreNode2 = (PItemCore)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pitemNode1 = new ASimpleItem(pitemcoreNode2, listNode4);
        }
	nodeList.add(pitemNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce APartItemCore */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PItemCore pitemcoreNode1;
        {
            // Block
        PParticipant pparticipantNode2;
        pparticipantNode2 = (PParticipant)nodeArrayList1.get(0);

        pitemcoreNode1 = new APartItemCore(pparticipantNode2);
        }
	nodeList.add(pitemcoreNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce APartNoteItemCore */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PItemCore pitemcoreNode1;
        {
            // Block
        PParticipantNote pparticipantnoteNode2;
        pparticipantnoteNode2 = (PParticipantNote)nodeArrayList1.get(0);

        pitemcoreNode1 = new APartNoteItemCore(pparticipantnoteNode2);
        }
	nodeList.add(pitemcoreNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AMsgItemCore */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PItemCore pitemcoreNode1;
        {
            // Block
        PMessage pmessageNode2;
        pmessageNode2 = (PMessage)nodeArrayList1.get(0);

        pitemcoreNode1 = new AMsgItemCore(pmessageNode2);
        }
	nodeList.add(pitemcoreNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AMsgNoteItemCore */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PItemCore pitemcoreNode1;
        {
            // Block
        PMessageNote pmessagenoteNode2;
        pmessagenoteNode2 = (PMessageNote)nodeArrayList1.get(0);

        pitemcoreNode1 = new AMsgNoteItemCore(pmessagenoteNode2);
        }
	nodeList.add(pitemcoreNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AMsgNoteLinkItemCore */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PItemCore pitemcoreNode1;
        {
            // Block
        PMsgnoteLink pmsgnotelinkNode2;
        pmsgnotelinkNode2 = (PMsgnoteLink)nodeArrayList1.get(0);

        pitemcoreNode1 = new AMsgNoteLinkItemCore(pmsgnotelinkNode2);
        }
	nodeList.add(pitemcoreNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AAsimpleparticipant1Participant */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParticipant pparticipantNode1;
        {
            // Block
        TParticipantTok tparticipanttokNode2;
        TQuot tquotNode3;
        PParticipantName pparticipantnameNode4;
        TQuot tquotNode5;
        @SuppressWarnings("unused") Object nullNode6 = null;
        @SuppressWarnings("unused") Object nullNode7 = null;
        tparticipanttokNode2 = (TParticipantTok)nodeArrayList1.get(0);
        tquotNode3 = (TQuot)nodeArrayList2.get(0);
        pparticipantnameNode4 = (PParticipantName)nodeArrayList3.get(0);
        tquotNode5 = (TQuot)nodeArrayList4.get(0);

        pparticipantNode1 = new ASimpleParticipant(tparticipanttokNode2, tquotNode3, pparticipantnameNode4, tquotNode5, null, null);
        }
	nodeList.add(pparticipantNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AAsimpleparticipant2Participant */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParticipant pparticipantNode1;
        {
            // Block
        TParticipantTok tparticipanttokNode2;
        TQuot tquotNode3;
        PParticipantName pparticipantnameNode4;
        TQuot tquotNode5;
        PPartAlias ppartaliasNode6;
        @SuppressWarnings("unused") Object nullNode7 = null;
        tparticipanttokNode2 = (TParticipantTok)nodeArrayList1.get(0);
        tquotNode3 = (TQuot)nodeArrayList2.get(0);
        pparticipantnameNode4 = (PParticipantName)nodeArrayList3.get(0);
        tquotNode5 = (TQuot)nodeArrayList4.get(0);
        ppartaliasNode6 = (PPartAlias)nodeArrayList5.get(0);

        pparticipantNode1 = new ASimpleParticipant(tparticipanttokNode2, tquotNode3, pparticipantnameNode4, tquotNode5, ppartaliasNode6, null);
        }
	nodeList.add(pparticipantNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AAsimpleparticipant3Participant */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParticipant pparticipantNode1;
        {
            // Block
        TParticipantTok tparticipanttokNode2;
        TQuot tquotNode3;
        PParticipantName pparticipantnameNode4;
        TQuot tquotNode5;
        @SuppressWarnings("unused") Object nullNode6 = null;
        PStereotype pstereotypeNode7;
        tparticipanttokNode2 = (TParticipantTok)nodeArrayList1.get(0);
        tquotNode3 = (TQuot)nodeArrayList2.get(0);
        pparticipantnameNode4 = (PParticipantName)nodeArrayList3.get(0);
        tquotNode5 = (TQuot)nodeArrayList4.get(0);
        pstereotypeNode7 = (PStereotype)nodeArrayList5.get(0);

        pparticipantNode1 = new ASimpleParticipant(tparticipanttokNode2, tquotNode3, pparticipantnameNode4, tquotNode5, null, pstereotypeNode7);
        }
	nodeList.add(pparticipantNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AAsimpleparticipant4Participant */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParticipant pparticipantNode1;
        {
            // Block
        TParticipantTok tparticipanttokNode2;
        TQuot tquotNode3;
        PParticipantName pparticipantnameNode4;
        TQuot tquotNode5;
        PPartAlias ppartaliasNode6;
        PStereotype pstereotypeNode7;
        tparticipanttokNode2 = (TParticipantTok)nodeArrayList1.get(0);
        tquotNode3 = (TQuot)nodeArrayList2.get(0);
        pparticipantnameNode4 = (PParticipantName)nodeArrayList3.get(0);
        tquotNode5 = (TQuot)nodeArrayList4.get(0);
        ppartaliasNode6 = (PPartAlias)nodeArrayList5.get(0);
        pstereotypeNode7 = (PStereotype)nodeArrayList6.get(0);

        pparticipantNode1 = new ASimpleParticipant(tparticipanttokNode2, tquotNode3, pparticipantnameNode4, tquotNode5, ppartaliasNode6, pstereotypeNode7);
        }
	nodeList.add(pparticipantNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce ASimpleParticipantName */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParticipantName pparticipantnameNode1;
        {
            // Block
        PName pnameNode2;
        pnameNode2 = (PName)nodeArrayList1.get(0);

        pparticipantnameNode1 = new ASimpleParticipantName(pnameNode2);
        }
	nodeList.add(pparticipantnameNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce ASimplePartAlias */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPartAlias ppartaliasNode1;
        {
            // Block
        TAliasTok taliastokNode2;
        PPartAliasName ppartaliasnameNode3;
        taliastokNode2 = (TAliasTok)nodeArrayList1.get(0);
        ppartaliasnameNode3 = (PPartAliasName)nodeArrayList2.get(0);

        ppartaliasNode1 = new ASimplePartAlias(taliastokNode2, ppartaliasnameNode3);
        }
	nodeList.add(ppartaliasNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce ASimplePartAliasName */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPartAliasName ppartaliasnameNode1;
        {
            // Block
        PName pnameNode2;
        pnameNode2 = (PName)nodeArrayList1.get(0);

        ppartaliasnameNode1 = new ASimplePartAliasName(pnameNode2);
        }
	nodeList.add(ppartaliasnameNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce ASimpleStereotype */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStereotype pstereotypeNode1;
        {
            // Block
        TLDAng tldangNode2;
        TStereotypeTok tstereotypetokNode3;
        TRDAng trdangNode4;
        tldangNode2 = (TLDAng)nodeArrayList1.get(0);
        tstereotypetokNode3 = (TStereotypeTok)nodeArrayList2.get(0);
        trdangNode4 = (TRDAng)nodeArrayList3.get(0);

        pstereotypeNode1 = new ASimpleStereotype(tldangNode2, tstereotypetokNode3, trdangNode4);
        }
	nodeList.add(pstereotypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce ASimpleParticipantNote */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParticipantNote pparticipantnoteNode1;
        {
            // Block
        TNoteTok tnotetokNode2;
        PPosition ppositionNode3;
        PParticipantRef pparticipantrefNode4;
        TNewLine tnewlineNode5;
        PContent pcontentNode6;
        TNewLine tnewlineNode7;
        TEndTok tendtokNode8;
        TNoteTok tnotetokNode9;
        tnotetokNode2 = (TNoteTok)nodeArrayList1.get(0);
        ppositionNode3 = (PPosition)nodeArrayList2.get(0);
        pparticipantrefNode4 = (PParticipantRef)nodeArrayList3.get(0);
        tnewlineNode5 = (TNewLine)nodeArrayList4.get(0);
        pcontentNode6 = (PContent)nodeArrayList5.get(0);
        tnewlineNode7 = (TNewLine)nodeArrayList6.get(0);
        tendtokNode8 = (TEndTok)nodeArrayList7.get(0);
        tnotetokNode9 = (TNoteTok)nodeArrayList8.get(0);

        pparticipantnoteNode1 = new ASimpleParticipantNote(tnotetokNode2, ppositionNode3, pparticipantrefNode4, tnewlineNode5, pcontentNode6, tnewlineNode7, tendtokNode8, tnotetokNode9);
        }
	nodeList.add(pparticipantnoteNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce ASimpleParticipantRef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParticipantRef pparticipantrefNode1;
        {
            // Block
        PName pnameNode2;
        pnameNode2 = (PName)nodeArrayList1.get(0);

        pparticipantrefNode1 = new ASimpleParticipantRef(pnameNode2);
        }
	nodeList.add(pparticipantrefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce ALeftPositionPosition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPosition ppositionNode1;
        {
            // Block
        TLeftTok tlefttokNode2;
        tlefttokNode2 = (TLeftTok)nodeArrayList1.get(0);

        ppositionNode1 = new ALeftPositionPosition(tlefttokNode2);
        }
	nodeList.add(ppositionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AOverPositionPosition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPosition ppositionNode1;
        {
            // Block
        TOverTok tovertokNode2;
        tovertokNode2 = (TOverTok)nodeArrayList1.get(0);

        ppositionNode1 = new AOverPositionPosition(tovertokNode2);
        }
	nodeList.add(ppositionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce ARightPositionPosition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPosition ppositionNode1;
        {
            // Block
        TRightTok trighttokNode2;
        trighttokNode2 = (TRightTok)nodeArrayList1.get(0);

        ppositionNode1 = new ARightPositionPosition(trighttokNode2);
        }
	nodeList.add(ppositionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce ASimpleMessage */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMessage pmessageNode1;
        {
            // Block
        PSender psenderNode2;
        TArrow tarrowNode3;
        PReceiver preceiverNode4;
        TColon tcolonNode5;
        PMessageName pmessagenameNode6;
        psenderNode2 = (PSender)nodeArrayList1.get(0);
        tarrowNode3 = (TArrow)nodeArrayList2.get(0);
        preceiverNode4 = (PReceiver)nodeArrayList3.get(0);
        tcolonNode5 = (TColon)nodeArrayList4.get(0);
        pmessagenameNode6 = (PMessageName)nodeArrayList5.get(0);

        pmessageNode1 = new ASimpleMessage(psenderNode2, tarrowNode3, preceiverNode4, tcolonNode5, pmessagenameNode6);
        }
	nodeList.add(pmessageNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce ASimpleSender */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSender psenderNode1;
        {
            // Block
        PName pnameNode2;
        pnameNode2 = (PName)nodeArrayList1.get(0);

        psenderNode1 = new ASimpleSender(pnameNode2);
        }
	nodeList.add(psenderNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce ASimpleReceiver */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PReceiver preceiverNode1;
        {
            // Block
        PName pnameNode2;
        pnameNode2 = (PName)nodeArrayList1.get(0);

        preceiverNode1 = new ASimpleReceiver(pnameNode2);
        }
	nodeList.add(preceiverNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce ASimpleMessageNote */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMessageNote pmessagenoteNode1;
        {
            // Block
        TNoteTok tnotetokNode2;
        PPosition ppositionNode3;
        PAliasNoteBlock paliasnoteblockNode4;
        TNewLine tnewlineNode5;
        PContent pcontentNode6;
        TNewLine tnewlineNode7;
        TEndTok tendtokNode8;
        TNoteTok tnotetokNode9;
        tnotetokNode2 = (TNoteTok)nodeArrayList1.get(0);
        ppositionNode3 = (PPosition)nodeArrayList2.get(0);
        paliasnoteblockNode4 = (PAliasNoteBlock)nodeArrayList3.get(0);
        tnewlineNode5 = (TNewLine)nodeArrayList4.get(0);
        pcontentNode6 = (PContent)nodeArrayList5.get(0);
        tnewlineNode7 = (TNewLine)nodeArrayList6.get(0);
        tendtokNode8 = (TEndTok)nodeArrayList7.get(0);
        tnotetokNode9 = (TNoteTok)nodeArrayList8.get(0);

        pmessagenoteNode1 = new ASimpleMessageNote(tnotetokNode2, ppositionNode3, paliasnoteblockNode4, tnewlineNode5, pcontentNode6, tnewlineNode7, tendtokNode8, tnotetokNode9);
        }
	nodeList.add(pmessagenoteNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce ASimpleAliasNoteBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAliasNoteBlock paliasnoteblockNode1;
        {
            // Block
        TAliasTok taliastokNode2;
        PAliasNote paliasnoteNode3;
        taliastokNode2 = (TAliasTok)nodeArrayList1.get(0);
        paliasnoteNode3 = (PAliasNote)nodeArrayList2.get(0);

        paliasnoteblockNode1 = new ASimpleAliasNoteBlock(taliastokNode2, paliasnoteNode3);
        }
	nodeList.add(paliasnoteblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce ASimpleAliasNote */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAliasNote paliasnoteNode1;
        {
            // Block
        PName pnameNode2;
        pnameNode2 = (PName)nodeArrayList1.get(0);

        paliasnoteNode1 = new ASimpleAliasNote(pnameNode2);
        }
	nodeList.add(paliasnoteNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce ASimpleMessageName */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMessageName pmessagenameNode1;
        {
            // Block
        PName pnameNode2;
        pnameNode2 = (PName)nodeArrayList1.get(0);

        pmessagenameNode1 = new ASimpleMessageName(pnameNode2);
        }
	nodeList.add(pmessagenameNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce ASimpleMessageRef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMessageRef pmessagerefNode1;
        {
            // Block
        PName pnameNode2;
        pnameNode2 = (PName)nodeArrayList1.get(0);

        pmessagerefNode1 = new ASimpleMessageRef(pnameNode2);
        }
	nodeList.add(pmessagerefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce ASimpleMsgnoteLink */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMsgnoteLink pmsgnotelinkNode1;
        {
            // Block
        TNoteMsgAng tnotemsgangNode2;
        PMessageRef pmessagerefNode3;
        TNoteMsgAng tnotemsgangNode4;
        TMsgLink tmsglinkNode5;
        PNoteRef pnoterefNode6;
        tnotemsgangNode2 = (TNoteMsgAng)nodeArrayList1.get(0);
        pmessagerefNode3 = (PMessageRef)nodeArrayList2.get(0);
        tnotemsgangNode4 = (TNoteMsgAng)nodeArrayList3.get(0);
        tmsglinkNode5 = (TMsgLink)nodeArrayList4.get(0);
        pnoterefNode6 = (PNoteRef)nodeArrayList5.get(0);

        pmsgnotelinkNode1 = new ASimpleMsgnoteLink(tnotemsgangNode2, pmessagerefNode3, tnotemsgangNode4, tmsglinkNode5, pnoterefNode6);
        }
	nodeList.add(pmsgnotelinkNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce ASimpleContent */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PContent pcontentNode1;
        {
            // Block
        TOpaqueexpr topaqueexprNode2;
        topaqueexprNode2 = (TOpaqueexpr)nodeArrayList1.get(0);

        pcontentNode1 = new ASimpleContent(topaqueexprNode2);
        }
	nodeList.add(pcontentNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce ASimpleNoteRef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNoteRef pnoterefNode1;
        {
            // Block
        PName pnameNode2;
        pnameNode2 = (PName)nodeArrayList1.get(0);

        pnoterefNode1 = new ASimpleNoteRef(pnameNode2);
        }
	nodeList.add(pnoterefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce ASimpleName */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PName pnameNode1;
        {
            // Block
        TCharSeq tcharseqNode2;
        tcharseqNode2 = (TCharSeq)nodeArrayList1.get(0);

        pnameNode1 = new ASimpleName(tcharseqNode2);
        }
	nodeList.add(pnameNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce ATerminal$Item */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PItem pitemNode1;
        pitemNode1 = (PItem)nodeArrayList1.get(0);
	if(pitemNode1 != null)
	{
	  listNode2.add(pitemNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce ANonTerminal$Item */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PItem pitemNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pitemNode2 = (PItem)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pitemNode2 != null)
	{
	  listNode3.add(pitemNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce ATerminal$NewLine */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        TNewLine tnewlineNode1;
        tnewlineNode1 = (TNewLine)nodeArrayList1.get(0);
	if(tnewlineNode1 != null)
	{
	  listNode2.add(tnewlineNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce ANonTerminal$NewLine */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        TNewLine tnewlineNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        tnewlineNode2 = (TNewLine)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(tnewlineNode2 != null)
	{
	  listNode3.add(tnewlineNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {8, SHIFT, 1}, },
			{{-1, ERROR, 1}, {20, SHIFT, 4}, },
			{{-1, ERROR, 2}, {21, ACCEPT, -1}, },
			{{-1, ERROR, 3}, {4, SHIFT, 6}, {9, SHIFT, 7}, {10, SHIFT, 8}, {13, SHIFT, 9}, {18, SHIFT, 10}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 2}, {20, SHIFT, 22}, },
			{{-1, ERROR, 6}, {18, SHIFT, 10}, },
			{{-1, REDUCE, 3}, },
			{{-1, ERROR, 8}, {6, SHIFT, 25}, },
			{{-1, ERROR, 9}, {14, SHIFT, 26}, {15, SHIFT, 27}, {16, SHIFT, 28}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 0}, },
			{{-1, REDUCE, 35}, },
			{{-1, ERROR, 13}, {20, SHIFT, 4}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 7}, },
			{{-1, ERROR, 17}, {1, SHIFT, 31}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 24}, },
			{{-1, ERROR, 21}, {4, SHIFT, 6}, {9, SHIFT, 7}, {10, SHIFT, 8}, {13, SHIFT, 9}, {18, SHIFT, 10}, },
			{{-1, REDUCE, 38}, },
			{{-1, ERROR, 23}, {4, SHIFT, 34}, },
			{{-1, REDUCE, 30}, },
			{{-1, ERROR, 25}, {18, SHIFT, 10}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 21}, },
			{{-1, ERROR, 29}, {12, SHIFT, 37}, {18, SHIFT, 10}, },
			{{-1, REDUCE, 4}, {20, SHIFT, 22}, },
			{{-1, ERROR, 31}, {18, SHIFT, 10}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 36}, },
			{{-1, ERROR, 34}, {5, SHIFT, 43}, },
			{{-1, ERROR, 35}, {6, SHIFT, 44}, },
			{{-1, REDUCE, 14}, },
			{{-1, ERROR, 37}, {18, SHIFT, 10}, },
			{{-1, ERROR, 38}, {20, SHIFT, 47}, },
			{{-1, ERROR, 39}, {20, SHIFT, 48}, },
			{{-1, REDUCE, 19}, },
			{{-1, ERROR, 41}, {0, SHIFT, 49}, },
			{{-1, REDUCE, 25}, },
			{{-1, ERROR, 43}, {18, SHIFT, 10}, },
			{{-1, REDUCE, 10}, {2, SHIFT, 52}, {12, SHIFT, 53}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 28}, },
			{{-1, ERROR, 47}, {19, SHIFT, 56}, },
			{{-1, ERROR, 48}, {19, SHIFT, 56}, },
			{{-1, ERROR, 49}, {18, SHIFT, 10}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 33}, },
			{{-1, ERROR, 52}, {11, SHIFT, 61}, },
			{{-1, ERROR, 53}, {18, SHIFT, 10}, },
			{{-1, REDUCE, 11}, {2, SHIFT, 52}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 32}, },
			{{-1, ERROR, 57}, {20, SHIFT, 65}, },
			{{-1, ERROR, 58}, {20, SHIFT, 66}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 29}, },
			{{-1, ERROR, 61}, {3, SHIFT, 67}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 13}, },
			{{-1, ERROR, 65}, {17, SHIFT, 68}, },
			{{-1, ERROR, 66}, {17, SHIFT, 69}, },
			{{-1, REDUCE, 17}, },
			{{-1, ERROR, 68}, {13, SHIFT, 70}, },
			{{-1, ERROR, 69}, {13, SHIFT, 71}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 26}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 3}, },
			{{-1, 11}, {21, 32}, },
			{{-1, 12}, {21, 33}, },
			{{-1, 13}, },
			{{-1, 14}, },
			{{-1, 35}, },
			{{-1, 54}, },
			{{-1, 62}, },
			{{-1, 55}, {54, 64}, },
			{{-1, 15}, },
			{{-1, 38}, },
			{{-1, 29}, },
			{{-1, 16}, },
			{{-1, 17}, },
			{{-1, 41}, },
			{{-1, 18}, },
			{{-1, 39}, },
			{{-1, 45}, },
			{{-1, 59}, },
			{{-1, 23}, },
			{{-1, 19}, },
			{{-1, 57}, {48, 58}, },
			{{-1, 50}, },
			{{-1, 20}, {6, 24}, {25, 36}, {29, 40}, {31, 42}, {37, 46}, {43, 51}, {49, 60}, {53, 63}, },
			{{-1, 21}, },
			{{-1, 5}, {13, 30}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: '@startuml'",
			"expecting: new line",
			"expecting: EOF",
			"expecting: '>', '@enduml', 'participant', 'note', char seq",
			"expecting: '>', '@enduml', 'participant', 'note', char seq, new line",
			"expecting: char seq",
			"expecting: '"'",
			"expecting: 'left', 'right', 'over'",
			"expecting: ':', arrow, '<<', '>', '"', new line",
			"expecting: arrow",
			"expecting: '>'",
			"expecting: 'as', char seq",
			"expecting: '..'",
			"expecting: ':'",
			"expecting: '<<', 'as', new line",
			"expecting: opaqueexpr",
			"expecting: 'Participant'",
			"expecting: '<<', new line",
			"expecting: '>>'",
			"expecting: 'end'",
			"expecting: 'note'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 4, 5, 2, 6, 7, 8, 2, 3, 1, 1, 1, 1, 9, 1, 1, 9, 3, 4, 10, 10, 5, 11, 11, 11, 11, 4, 5, 2, 3, 12, 6, 6, 5, 1, 1, 1, 13, 13, 5, 14, 1, 1, 15, 15, 5, 1, 1, 16, 5, 17, 1, 1, 1, 1, 1, 1, 18, 17, 17, 1, 19, 19, 1, 20, 20, 1, 1, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
