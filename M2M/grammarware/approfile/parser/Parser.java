/* This file was generated by SableCC (http://www.sablecc.org/). */

package approfile.parser;

import approfile.lexer.*;
import approfile.node.*;
import approfile.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PStereotype node1 = (PStereotype) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AParticipantStereotype */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce AInputStereotype */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list, false);
            }
            break;
            case 2: /* reduce AOutputStereotype */
            {
                ArrayList<Object> list = new2();
                push(goTo(0), list, false);
            }
            break;
            case 3: /* reduce ASimpleParticipantSt */
            {
                ArrayList<Object> list = new3();
                push(goTo(1), list, false);
            }
            break;
            case 4: /* reduce ASimpleTransactions */
            {
                ArrayList<Object> list = new4();
                push(goTo(2), list, false);
            }
            break;
            case 5: /* reduce ASimpleTransactionList */
            {
                ArrayList<Object> list = new5();
                push(goTo(3), list, false);
            }
            break;
            case 6: /* reduce AListTransactionList */
            {
                ArrayList<Object> list = new6();
                push(goTo(3), list, false);
            }
            break;
            case 7: /* reduce ASimpleTransaction */
            {
                ArrayList<Object> list = new7();
                push(goTo(4), list, false);
            }
            break;
            case 8: /* reduce ASimpleIdClause */
            {
                ArrayList<Object> list = new8();
                push(goTo(5), list, false);
            }
            break;
            case 9: /* reduce ASimplePubkeyClause */
            {
                ArrayList<Object> list = new9();
                push(goTo(6), list, false);
            }
            break;
            case 10: /* reduce ASimpleSendaddClause */
            {
                ArrayList<Object> list = new10();
                push(goTo(7), list, false);
            }
            break;
            case 11: /* reduce ASimpleDigitalsigClause */
            {
                ArrayList<Object> list = new11();
                push(goTo(8), list, false);
            }
            break;
            case 12: /* reduce ASimpleInputAssetsClause */
            {
                ArrayList<Object> list = new12();
                push(goTo(9), list, false);
            }
            break;
            case 13: /* reduce ASimpleOutputAssetsClause */
            {
                ArrayList<Object> list = new13();
                push(goTo(10), list, false);
            }
            break;
            case 14: /* reduce ASimpleIdName */
            {
                ArrayList<Object> list = new14();
                push(goTo(11), list, false);
            }
            break;
            case 15: /* reduce AFuncIdName */
            {
                ArrayList<Object> list = new15();
                push(goTo(11), list, false);
            }
            break;
            case 16: /* reduce ASimpleSenderpubkeyName */
            {
                ArrayList<Object> list = new16();
                push(goTo(12), list, false);
            }
            break;
            case 17: /* reduce AFuncSenderpubkeyName */
            {
                ArrayList<Object> list = new17();
                push(goTo(12), list, false);
            }
            break;
            case 18: /* reduce ASimpleSenderaddressName */
            {
                ArrayList<Object> list = new18();
                push(goTo(13), list, false);
            }
            break;
            case 19: /* reduce AFuncSenderaddressName */
            {
                ArrayList<Object> list = new19();
                push(goTo(13), list, false);
            }
            break;
            case 20: /* reduce ADigisimpleDigitalsignatureName */
            {
                ArrayList<Object> list = new20();
                push(goTo(14), list, false);
            }
            break;
            case 21: /* reduce ADigifuncDigitalsignatureName */
            {
                ArrayList<Object> list = new21();
                push(goTo(14), list, false);
            }
            break;
            case 22: /* reduce ASimpleInassetsList */
            {
                ArrayList<Object> list = new22();
                push(goTo(15), list, false);
            }
            break;
            case 23: /* reduce AListInassetsList */
            {
                ArrayList<Object> list = new23();
                push(goTo(15), list, false);
            }
            break;
            case 24: /* reduce ASimpleOutassetsList */
            {
                ArrayList<Object> list = new24();
                push(goTo(16), list, false);
            }
            break;
            case 25: /* reduce AListOutassetsList */
            {
                ArrayList<Object> list = new25();
                push(goTo(16), list, false);
            }
            break;
            case 26: /* reduce ASimpleInputAssetName */
            {
                ArrayList<Object> list = new26();
                push(goTo(17), list, false);
            }
            break;
            case 27: /* reduce ASimpleOutputAssetName */
            {
                ArrayList<Object> list = new27();
                push(goTo(18), list, false);
            }
            break;
            case 28: /* reduce AAsimpleinputassetst1InputassetSt */
            {
                ArrayList<Object> list = new28();
                push(goTo(19), list, false);
            }
            break;
            case 29: /* reduce AAsimpleinputassetst2InputassetSt */
            {
                ArrayList<Object> list = new29();
                push(goTo(19), list, false);
            }
            break;
            case 30: /* reduce ASimpleProvenanceAddClause */
            {
                ArrayList<Object> list = new30();
                push(goTo(20), list, false);
            }
            break;
            case 31: /* reduce ASimpleTransactionRef */
            {
                ArrayList<Object> list = new31();
                push(goTo(21), list, false);
            }
            break;
            case 32: /* reduce AAsimpleoutputassetst1OutputassetSt */
            {
                ArrayList<Object> list = new32();
                push(goTo(22), list, false);
            }
            break;
            case 33: /* reduce AAsimpleoutputassetst2OutputassetSt */
            {
                ArrayList<Object> list = new33();
                push(goTo(22), list, false);
            }
            break;
            case 34: /* reduce ASimpleAssetRef */
            {
                ArrayList<Object> list = new34();
                push(goTo(23), list, false);
            }
            break;
            case 35: /* reduce ASimpleDataClause */
            {
                ArrayList<Object> list = new35();
                push(goTo(24), list, false);
            }
            break;
            case 36: /* reduce ASimpleDataPayload */
            {
                ArrayList<Object> list = new36();
                push(goTo(25), list, false);
            }
            break;
            case 37: /* reduce ASimpleRecAddressClause */
            {
                ArrayList<Object> list = new37();
                push(goTo(26), list, false);
            }
            break;
            case 38: /* reduce ASimpleConditionClause */
            {
                ArrayList<Object> list = new38();
                push(goTo(27), list, false);
            }
            break;
            case 39: /* reduce ASimpleConditionPayload */
            {
                ArrayList<Object> list = new39();
                push(goTo(28), list, false);
            }
            break;
            case 40: /* reduce ASimpleParticipantRef */
            {
                ArrayList<Object> list = new40();
                push(goTo(29), list, false);
            }
            break;
            case 41: /* reduce ASimpleName */
            {
                ArrayList<Object> list = new41();
                push(goTo(30), list, false);
            }
            break;
            case 42: /* reduce ASimpleFuncName */
            {
                ArrayList<Object> list = new42();
                push(goTo(31), list, false);
            }
            break;
            case 43: /* reduce ANestedFuncName */
            {
                ArrayList<Object> list = new43();
                push(goTo(31), list, false);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AParticipantStereotype */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStereotype pstereotypeNode1;
        {
            // Block
        PParticipantSt pparticipantstNode2;
        pparticipantstNode2 = (PParticipantSt)nodeArrayList1.get(0);

        pstereotypeNode1 = new AParticipantStereotype(pparticipantstNode2);
        }
	nodeList.add(pstereotypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AInputStereotype */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStereotype pstereotypeNode1;
        {
            // Block
        PInputassetSt pinputassetstNode2;
        pinputassetstNode2 = (PInputassetSt)nodeArrayList1.get(0);

        pstereotypeNode1 = new AInputStereotype(pinputassetstNode2);
        }
	nodeList.add(pstereotypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AOutputStereotype */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStereotype pstereotypeNode1;
        {
            // Block
        POutputassetSt poutputassetstNode2;
        poutputassetstNode2 = (POutputassetSt)nodeArrayList1.get(0);

        pstereotypeNode1 = new AOutputStereotype(poutputassetstNode2);
        }
	nodeList.add(pstereotypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce ASimpleParticipantSt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParticipantSt pparticipantstNode1;
        {
            // Block
        TParticipantStereotype tparticipantstereotypeNode2;
        PTransactions ptransactionsNode3;
        tparticipantstereotypeNode2 = (TParticipantStereotype)nodeArrayList1.get(0);
        ptransactionsNode3 = (PTransactions)nodeArrayList2.get(0);

        pparticipantstNode1 = new ASimpleParticipantSt(tparticipantstereotypeNode2, ptransactionsNode3);
        }
	nodeList.add(pparticipantstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce ASimpleTransactions */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTransactions ptransactionsNode1;
        {
            // Block
        TTransactionTaggedtok ttransactiontaggedtokNode2;
        TEquals tequalsNode3;
        TOpenCurly topencurlyNode4;
        PTransactionList ptransactionlistNode5;
        TCloseCurly tclosecurlyNode6;
        ttransactiontaggedtokNode2 = (TTransactionTaggedtok)nodeArrayList1.get(0);
        tequalsNode3 = (TEquals)nodeArrayList2.get(0);
        topencurlyNode4 = (TOpenCurly)nodeArrayList3.get(0);
        ptransactionlistNode5 = (PTransactionList)nodeArrayList4.get(0);
        tclosecurlyNode6 = (TCloseCurly)nodeArrayList5.get(0);

        ptransactionsNode1 = new ASimpleTransactions(ttransactiontaggedtokNode2, tequalsNode3, topencurlyNode4, ptransactionlistNode5, tclosecurlyNode6);
        }
	nodeList.add(ptransactionsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce ASimpleTransactionList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTransactionList ptransactionlistNode1;
        {
            // Block
        PTransaction ptransactionNode2;
        ptransactionNode2 = (PTransaction)nodeArrayList1.get(0);

        ptransactionlistNode1 = new ASimpleTransactionList(ptransactionNode2);
        }
	nodeList.add(ptransactionlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AListTransactionList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTransactionList ptransactionlistNode1;
        {
            // Block
        PTransaction ptransactionNode2;
        TComma tcommaNode3;
        PTransactionList ptransactionlistNode4;
        ptransactionNode2 = (PTransaction)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        ptransactionlistNode4 = (PTransactionList)nodeArrayList3.get(0);

        ptransactionlistNode1 = new AListTransactionList(ptransactionNode2, tcommaNode3, ptransactionlistNode4);
        }
	nodeList.add(ptransactionlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce ASimpleTransaction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList13 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTransaction ptransactionNode1;
        {
            // Block
        TOpenRound topenroundNode2;
        PIdClause pidclauseNode3;
        TComma tcommaNode4;
        PPubkeyClause ppubkeyclauseNode5;
        TComma tcommaNode6;
        PSendaddClause psendaddclauseNode7;
        TComma tcommaNode8;
        PDigitalsigClause pdigitalsigclauseNode9;
        TComma tcommaNode10;
        PInputAssetsClause pinputassetsclauseNode11;
        TComma tcommaNode12;
        POutputAssetsClause poutputassetsclauseNode13;
        TCloseRound tcloseroundNode14;
        topenroundNode2 = (TOpenRound)nodeArrayList1.get(0);
        pidclauseNode3 = (PIdClause)nodeArrayList2.get(0);
        tcommaNode4 = (TComma)nodeArrayList3.get(0);
        ppubkeyclauseNode5 = (PPubkeyClause)nodeArrayList4.get(0);
        tcommaNode6 = (TComma)nodeArrayList5.get(0);
        psendaddclauseNode7 = (PSendaddClause)nodeArrayList6.get(0);
        tcommaNode8 = (TComma)nodeArrayList7.get(0);
        pdigitalsigclauseNode9 = (PDigitalsigClause)nodeArrayList8.get(0);
        tcommaNode10 = (TComma)nodeArrayList9.get(0);
        pinputassetsclauseNode11 = (PInputAssetsClause)nodeArrayList10.get(0);
        tcommaNode12 = (TComma)nodeArrayList11.get(0);
        poutputassetsclauseNode13 = (POutputAssetsClause)nodeArrayList12.get(0);
        tcloseroundNode14 = (TCloseRound)nodeArrayList13.get(0);

        ptransactionNode1 = new ASimpleTransaction(topenroundNode2, pidclauseNode3, tcommaNode4, ppubkeyclauseNode5, tcommaNode6, psendaddclauseNode7, tcommaNode8, pdigitalsigclauseNode9, tcommaNode10, pinputassetsclauseNode11, tcommaNode12, poutputassetsclauseNode13, tcloseroundNode14);
        }
	nodeList.add(ptransactionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce ASimpleIdClause */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIdClause pidclauseNode1;
        {
            // Block
        TIdTaggedtok tidtaggedtokNode2;
        TEquals tequalsNode3;
        PIdName pidnameNode4;
        tidtaggedtokNode2 = (TIdTaggedtok)nodeArrayList1.get(0);
        tequalsNode3 = (TEquals)nodeArrayList2.get(0);
        pidnameNode4 = (PIdName)nodeArrayList3.get(0);

        pidclauseNode1 = new ASimpleIdClause(tidtaggedtokNode2, tequalsNode3, pidnameNode4);
        }
	nodeList.add(pidclauseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce ASimplePubkeyClause */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPubkeyClause ppubkeyclauseNode1;
        {
            // Block
        TSenderpubkeyTaggedtok tsenderpubkeytaggedtokNode2;
        TEquals tequalsNode3;
        PSenderpubkeyName psenderpubkeynameNode4;
        tsenderpubkeytaggedtokNode2 = (TSenderpubkeyTaggedtok)nodeArrayList1.get(0);
        tequalsNode3 = (TEquals)nodeArrayList2.get(0);
        psenderpubkeynameNode4 = (PSenderpubkeyName)nodeArrayList3.get(0);

        ppubkeyclauseNode1 = new ASimplePubkeyClause(tsenderpubkeytaggedtokNode2, tequalsNode3, psenderpubkeynameNode4);
        }
	nodeList.add(ppubkeyclauseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce ASimpleSendaddClause */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSendaddClause psendaddclauseNode1;
        {
            // Block
        TSenderaddressTaggedtok tsenderaddresstaggedtokNode2;
        TEquals tequalsNode3;
        PSenderaddressName psenderaddressnameNode4;
        tsenderaddresstaggedtokNode2 = (TSenderaddressTaggedtok)nodeArrayList1.get(0);
        tequalsNode3 = (TEquals)nodeArrayList2.get(0);
        psenderaddressnameNode4 = (PSenderaddressName)nodeArrayList3.get(0);

        psendaddclauseNode1 = new ASimpleSendaddClause(tsenderaddresstaggedtokNode2, tequalsNode3, psenderaddressnameNode4);
        }
	nodeList.add(psendaddclauseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce ASimpleDigitalsigClause */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDigitalsigClause pdigitalsigclauseNode1;
        {
            // Block
        TDigitalsignatureTaggedtok tdigitalsignaturetaggedtokNode2;
        TEquals tequalsNode3;
        PDigitalsignatureName pdigitalsignaturenameNode4;
        tdigitalsignaturetaggedtokNode2 = (TDigitalsignatureTaggedtok)nodeArrayList1.get(0);
        tequalsNode3 = (TEquals)nodeArrayList2.get(0);
        pdigitalsignaturenameNode4 = (PDigitalsignatureName)nodeArrayList3.get(0);

        pdigitalsigclauseNode1 = new ASimpleDigitalsigClause(tdigitalsignaturetaggedtokNode2, tequalsNode3, pdigitalsignaturenameNode4);
        }
	nodeList.add(pdigitalsigclauseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce ASimpleInputAssetsClause */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInputAssetsClause pinputassetsclauseNode1;
        {
            // Block
        TInputassetsTaggedtok tinputassetstaggedtokNode2;
        TEquals tequalsNode3;
        TOpenCurly topencurlyNode4;
        PInassetsList pinassetslistNode5;
        TCloseCurly tclosecurlyNode6;
        tinputassetstaggedtokNode2 = (TInputassetsTaggedtok)nodeArrayList1.get(0);
        tequalsNode3 = (TEquals)nodeArrayList2.get(0);
        topencurlyNode4 = (TOpenCurly)nodeArrayList3.get(0);
        pinassetslistNode5 = (PInassetsList)nodeArrayList4.get(0);
        tclosecurlyNode6 = (TCloseCurly)nodeArrayList5.get(0);

        pinputassetsclauseNode1 = new ASimpleInputAssetsClause(tinputassetstaggedtokNode2, tequalsNode3, topencurlyNode4, pinassetslistNode5, tclosecurlyNode6);
        }
	nodeList.add(pinputassetsclauseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce ASimpleOutputAssetsClause */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POutputAssetsClause poutputassetsclauseNode1;
        {
            // Block
        TOutputassetsTaggedtok toutputassetstaggedtokNode2;
        TEquals tequalsNode3;
        TOpenCurly topencurlyNode4;
        POutassetsList poutassetslistNode5;
        TCloseCurly tclosecurlyNode6;
        toutputassetstaggedtokNode2 = (TOutputassetsTaggedtok)nodeArrayList1.get(0);
        tequalsNode3 = (TEquals)nodeArrayList2.get(0);
        topencurlyNode4 = (TOpenCurly)nodeArrayList3.get(0);
        poutassetslistNode5 = (POutassetsList)nodeArrayList4.get(0);
        tclosecurlyNode6 = (TCloseCurly)nodeArrayList5.get(0);

        poutputassetsclauseNode1 = new ASimpleOutputAssetsClause(toutputassetstaggedtokNode2, tequalsNode3, topencurlyNode4, poutassetslistNode5, tclosecurlyNode6);
        }
	nodeList.add(poutputassetsclauseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce ASimpleIdName */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIdName pidnameNode1;
        {
            // Block
        PName pnameNode2;
        pnameNode2 = (PName)nodeArrayList1.get(0);

        pidnameNode1 = new ASimpleIdName(pnameNode2);
        }
	nodeList.add(pidnameNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AFuncIdName */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIdName pidnameNode1;
        {
            // Block
        PFuncName pfuncnameNode2;
        pfuncnameNode2 = (PFuncName)nodeArrayList1.get(0);

        pidnameNode1 = new AFuncIdName(pfuncnameNode2);
        }
	nodeList.add(pidnameNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce ASimpleSenderpubkeyName */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSenderpubkeyName psenderpubkeynameNode1;
        {
            // Block
        PName pnameNode2;
        pnameNode2 = (PName)nodeArrayList1.get(0);

        psenderpubkeynameNode1 = new ASimpleSenderpubkeyName(pnameNode2);
        }
	nodeList.add(psenderpubkeynameNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AFuncSenderpubkeyName */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSenderpubkeyName psenderpubkeynameNode1;
        {
            // Block
        PFuncName pfuncnameNode2;
        pfuncnameNode2 = (PFuncName)nodeArrayList1.get(0);

        psenderpubkeynameNode1 = new AFuncSenderpubkeyName(pfuncnameNode2);
        }
	nodeList.add(psenderpubkeynameNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce ASimpleSenderaddressName */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSenderaddressName psenderaddressnameNode1;
        {
            // Block
        PName pnameNode2;
        pnameNode2 = (PName)nodeArrayList1.get(0);

        psenderaddressnameNode1 = new ASimpleSenderaddressName(pnameNode2);
        }
	nodeList.add(psenderaddressnameNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AFuncSenderaddressName */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSenderaddressName psenderaddressnameNode1;
        {
            // Block
        PFuncName pfuncnameNode2;
        pfuncnameNode2 = (PFuncName)nodeArrayList1.get(0);

        psenderaddressnameNode1 = new AFuncSenderaddressName(pfuncnameNode2);
        }
	nodeList.add(psenderaddressnameNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce ADigisimpleDigitalsignatureName */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDigitalsignatureName pdigitalsignaturenameNode1;
        {
            // Block
        PName pnameNode2;
        pnameNode2 = (PName)nodeArrayList1.get(0);

        pdigitalsignaturenameNode1 = new ADigisimpleDigitalsignatureName(pnameNode2);
        }
	nodeList.add(pdigitalsignaturenameNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce ADigifuncDigitalsignatureName */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDigitalsignatureName pdigitalsignaturenameNode1;
        {
            // Block
        PFuncName pfuncnameNode2;
        pfuncnameNode2 = (PFuncName)nodeArrayList1.get(0);

        pdigitalsignaturenameNode1 = new ADigifuncDigitalsignatureName(pfuncnameNode2);
        }
	nodeList.add(pdigitalsignaturenameNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce ASimpleInassetsList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInassetsList pinassetslistNode1;
        {
            // Block
        PInputAssetName pinputassetnameNode2;
        pinputassetnameNode2 = (PInputAssetName)nodeArrayList1.get(0);

        pinassetslistNode1 = new ASimpleInassetsList(pinputassetnameNode2);
        }
	nodeList.add(pinassetslistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AListInassetsList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInassetsList pinassetslistNode1;
        {
            // Block
        PInputAssetName pinputassetnameNode2;
        TComma tcommaNode3;
        PInassetsList pinassetslistNode4;
        pinputassetnameNode2 = (PInputAssetName)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        pinassetslistNode4 = (PInassetsList)nodeArrayList3.get(0);

        pinassetslistNode1 = new AListInassetsList(pinputassetnameNode2, tcommaNode3, pinassetslistNode4);
        }
	nodeList.add(pinassetslistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce ASimpleOutassetsList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POutassetsList poutassetslistNode1;
        {
            // Block
        POutputAssetName poutputassetnameNode2;
        poutputassetnameNode2 = (POutputAssetName)nodeArrayList1.get(0);

        poutassetslistNode1 = new ASimpleOutassetsList(poutputassetnameNode2);
        }
	nodeList.add(poutassetslistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AListOutassetsList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POutassetsList poutassetslistNode1;
        {
            // Block
        POutputAssetName poutputassetnameNode2;
        TComma tcommaNode3;
        POutassetsList poutassetslistNode4;
        poutputassetnameNode2 = (POutputAssetName)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        poutassetslistNode4 = (POutassetsList)nodeArrayList3.get(0);

        poutassetslistNode1 = new AListOutassetsList(poutputassetnameNode2, tcommaNode3, poutassetslistNode4);
        }
	nodeList.add(poutassetslistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce ASimpleInputAssetName */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInputAssetName pinputassetnameNode1;
        {
            // Block
        PName pnameNode2;
        pnameNode2 = (PName)nodeArrayList1.get(0);

        pinputassetnameNode1 = new ASimpleInputAssetName(pnameNode2);
        }
	nodeList.add(pinputassetnameNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce ASimpleOutputAssetName */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POutputAssetName poutputassetnameNode1;
        {
            // Block
        PName pnameNode2;
        pnameNode2 = (PName)nodeArrayList1.get(0);

        poutputassetnameNode1 = new ASimpleOutputAssetName(pnameNode2);
        }
	nodeList.add(poutputassetnameNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AAsimpleinputassetst1InputassetSt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInputassetSt pinputassetstNode1;
        {
            // Block
        TInputassetStereotype tinputassetstereotypeNode2;
        PAssetRef passetrefNode3;
        TOpenCurly topencurlyNode4;
        PDataClause pdataclauseNode5;
        @SuppressWarnings("unused") Object nullNode6 = null;
        TCloseCurly tclosecurlyNode7;
        tinputassetstereotypeNode2 = (TInputassetStereotype)nodeArrayList1.get(0);
        passetrefNode3 = (PAssetRef)nodeArrayList2.get(0);
        topencurlyNode4 = (TOpenCurly)nodeArrayList3.get(0);
        pdataclauseNode5 = (PDataClause)nodeArrayList4.get(0);
        tclosecurlyNode7 = (TCloseCurly)nodeArrayList5.get(0);

        pinputassetstNode1 = new ASimpleInputassetSt(tinputassetstereotypeNode2, passetrefNode3, topencurlyNode4, pdataclauseNode5, null, tclosecurlyNode7);
        }
	nodeList.add(pinputassetstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AAsimpleinputassetst2InputassetSt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInputassetSt pinputassetstNode1;
        {
            // Block
        TInputassetStereotype tinputassetstereotypeNode2;
        PAssetRef passetrefNode3;
        TOpenCurly topencurlyNode4;
        PDataClause pdataclauseNode5;
        PProvenanceAddClause pprovenanceaddclauseNode6;
        TCloseCurly tclosecurlyNode7;
        tinputassetstereotypeNode2 = (TInputassetStereotype)nodeArrayList1.get(0);
        passetrefNode3 = (PAssetRef)nodeArrayList2.get(0);
        topencurlyNode4 = (TOpenCurly)nodeArrayList3.get(0);
        pdataclauseNode5 = (PDataClause)nodeArrayList4.get(0);
        pprovenanceaddclauseNode6 = (PProvenanceAddClause)nodeArrayList5.get(0);
        tclosecurlyNode7 = (TCloseCurly)nodeArrayList6.get(0);

        pinputassetstNode1 = new ASimpleInputassetSt(tinputassetstereotypeNode2, passetrefNode3, topencurlyNode4, pdataclauseNode5, pprovenanceaddclauseNode6, tclosecurlyNode7);
        }
	nodeList.add(pinputassetstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce ASimpleProvenanceAddClause */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProvenanceAddClause pprovenanceaddclauseNode1;
        {
            // Block
        TComma tcommaNode2;
        TProvenanceTaggedtok tprovenancetaggedtokNode3;
        TEquals tequalsNode4;
        PTransactionRef ptransactionrefNode5;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        tprovenancetaggedtokNode3 = (TProvenanceTaggedtok)nodeArrayList2.get(0);
        tequalsNode4 = (TEquals)nodeArrayList3.get(0);
        ptransactionrefNode5 = (PTransactionRef)nodeArrayList4.get(0);

        pprovenanceaddclauseNode1 = new ASimpleProvenanceAddClause(tcommaNode2, tprovenancetaggedtokNode3, tequalsNode4, ptransactionrefNode5);
        }
	nodeList.add(pprovenanceaddclauseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce ASimpleTransactionRef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTransactionRef ptransactionrefNode1;
        {
            // Block
        PName pnameNode2;
        pnameNode2 = (PName)nodeArrayList1.get(0);

        ptransactionrefNode1 = new ASimpleTransactionRef(pnameNode2);
        }
	nodeList.add(ptransactionrefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AAsimpleoutputassetst1OutputassetSt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POutputassetSt poutputassetstNode1;
        {
            // Block
        TOutputassetStereotype toutputassetstereotypeNode2;
        PAssetRef passetrefNode3;
        TOpenCurly topencurlyNode4;
        PDataClause pdataclauseNode5;
        TComma tcommaNode6;
        PRecAddressClause precaddressclauseNode7;
        @SuppressWarnings("unused") Object nullNode8 = null;
        TCloseCurly tclosecurlyNode9;
        toutputassetstereotypeNode2 = (TOutputassetStereotype)nodeArrayList1.get(0);
        passetrefNode3 = (PAssetRef)nodeArrayList2.get(0);
        topencurlyNode4 = (TOpenCurly)nodeArrayList3.get(0);
        pdataclauseNode5 = (PDataClause)nodeArrayList4.get(0);
        tcommaNode6 = (TComma)nodeArrayList5.get(0);
        precaddressclauseNode7 = (PRecAddressClause)nodeArrayList6.get(0);
        tclosecurlyNode9 = (TCloseCurly)nodeArrayList7.get(0);

        poutputassetstNode1 = new ASimpleOutputassetSt(toutputassetstereotypeNode2, passetrefNode3, topencurlyNode4, pdataclauseNode5, tcommaNode6, precaddressclauseNode7, null, tclosecurlyNode9);
        }
	nodeList.add(poutputassetstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AAsimpleoutputassetst2OutputassetSt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POutputassetSt poutputassetstNode1;
        {
            // Block
        TOutputassetStereotype toutputassetstereotypeNode2;
        PAssetRef passetrefNode3;
        TOpenCurly topencurlyNode4;
        PDataClause pdataclauseNode5;
        TComma tcommaNode6;
        PRecAddressClause precaddressclauseNode7;
        PConditionClause pconditionclauseNode8;
        TCloseCurly tclosecurlyNode9;
        toutputassetstereotypeNode2 = (TOutputassetStereotype)nodeArrayList1.get(0);
        passetrefNode3 = (PAssetRef)nodeArrayList2.get(0);
        topencurlyNode4 = (TOpenCurly)nodeArrayList3.get(0);
        pdataclauseNode5 = (PDataClause)nodeArrayList4.get(0);
        tcommaNode6 = (TComma)nodeArrayList5.get(0);
        precaddressclauseNode7 = (PRecAddressClause)nodeArrayList6.get(0);
        pconditionclauseNode8 = (PConditionClause)nodeArrayList7.get(0);
        tclosecurlyNode9 = (TCloseCurly)nodeArrayList8.get(0);

        poutputassetstNode1 = new ASimpleOutputassetSt(toutputassetstereotypeNode2, passetrefNode3, topencurlyNode4, pdataclauseNode5, tcommaNode6, precaddressclauseNode7, pconditionclauseNode8, tclosecurlyNode9);
        }
	nodeList.add(poutputassetstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce ASimpleAssetRef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAssetRef passetrefNode1;
        {
            // Block
        PName pnameNode2;
        pnameNode2 = (PName)nodeArrayList1.get(0);

        passetrefNode1 = new ASimpleAssetRef(pnameNode2);
        }
	nodeList.add(passetrefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce ASimpleDataClause */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDataClause pdataclauseNode1;
        {
            // Block
        TDataTaggedtok tdatataggedtokNode2;
        TEquals tequalsNode3;
        PDataPayload pdatapayloadNode4;
        tdatataggedtokNode2 = (TDataTaggedtok)nodeArrayList1.get(0);
        tequalsNode3 = (TEquals)nodeArrayList2.get(0);
        pdatapayloadNode4 = (PDataPayload)nodeArrayList3.get(0);

        pdataclauseNode1 = new ASimpleDataClause(tdatataggedtokNode2, tequalsNode3, pdatapayloadNode4);
        }
	nodeList.add(pdataclauseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce ASimpleDataPayload */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDataPayload pdatapayloadNode1;
        {
            // Block
        TOpaqueexpr topaqueexprNode2;
        topaqueexprNode2 = (TOpaqueexpr)nodeArrayList1.get(0);

        pdatapayloadNode1 = new ASimpleDataPayload(topaqueexprNode2);
        }
	nodeList.add(pdatapayloadNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce ASimpleRecAddressClause */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRecAddressClause precaddressclauseNode1;
        {
            // Block
        TReceiverTaggedtok treceivertaggedtokNode2;
        TEquals tequalsNode3;
        PParticipantRef pparticipantrefNode4;
        treceivertaggedtokNode2 = (TReceiverTaggedtok)nodeArrayList1.get(0);
        tequalsNode3 = (TEquals)nodeArrayList2.get(0);
        pparticipantrefNode4 = (PParticipantRef)nodeArrayList3.get(0);

        precaddressclauseNode1 = new ASimpleRecAddressClause(treceivertaggedtokNode2, tequalsNode3, pparticipantrefNode4);
        }
	nodeList.add(precaddressclauseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce ASimpleConditionClause */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConditionClause pconditionclauseNode1;
        {
            // Block
        TComma tcommaNode2;
        TConditionTaggedtok tconditiontaggedtokNode3;
        TEquals tequalsNode4;
        PConditionPayload pconditionpayloadNode5;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        tconditiontaggedtokNode3 = (TConditionTaggedtok)nodeArrayList2.get(0);
        tequalsNode4 = (TEquals)nodeArrayList3.get(0);
        pconditionpayloadNode5 = (PConditionPayload)nodeArrayList4.get(0);

        pconditionclauseNode1 = new ASimpleConditionClause(tcommaNode2, tconditiontaggedtokNode3, tequalsNode4, pconditionpayloadNode5);
        }
	nodeList.add(pconditionclauseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce ASimpleConditionPayload */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConditionPayload pconditionpayloadNode1;
        {
            // Block
        TOpaqueexpr topaqueexprNode2;
        topaqueexprNode2 = (TOpaqueexpr)nodeArrayList1.get(0);

        pconditionpayloadNode1 = new ASimpleConditionPayload(topaqueexprNode2);
        }
	nodeList.add(pconditionpayloadNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce ASimpleParticipantRef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParticipantRef pparticipantrefNode1;
        {
            // Block
        PName pnameNode2;
        pnameNode2 = (PName)nodeArrayList1.get(0);

        pparticipantrefNode1 = new ASimpleParticipantRef(pnameNode2);
        }
	nodeList.add(pparticipantrefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce ASimpleName */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PName pnameNode1;
        {
            // Block
        TCharSeq tcharseqNode2;
        tcharseqNode2 = (TCharSeq)nodeArrayList1.get(0);

        pnameNode1 = new ASimpleName(tcharseqNode2);
        }
	nodeList.add(pnameNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce ASimpleFuncName */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFuncName pfuncnameNode1;
        {
            // Block
        PName pnameNode2;
        TOpenRound topenroundNode3;
        TCloseRound tcloseroundNode4;
        pnameNode2 = (PName)nodeArrayList1.get(0);
        topenroundNode3 = (TOpenRound)nodeArrayList2.get(0);
        tcloseroundNode4 = (TCloseRound)nodeArrayList3.get(0);

        pfuncnameNode1 = new ASimpleFuncName(pnameNode2, topenroundNode3, tcloseroundNode4);
        }
	nodeList.add(pfuncnameNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce ANestedFuncName */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFuncName pfuncnameNode1;
        {
            // Block
        PName pnameNode2;
        TOpenRound topenroundNode3;
        PFuncName pfuncnameNode4;
        TCloseRound tcloseroundNode5;
        pnameNode2 = (PName)nodeArrayList1.get(0);
        topenroundNode3 = (TOpenRound)nodeArrayList2.get(0);
        pfuncnameNode4 = (PFuncName)nodeArrayList3.get(0);
        tcloseroundNode5 = (TCloseRound)nodeArrayList4.get(0);

        pfuncnameNode1 = new ANestedFuncName(pnameNode2, topenroundNode3, pfuncnameNode4, tcloseroundNode5);
        }
	nodeList.add(pfuncnameNode1);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {6, SHIFT, 1}, {7, SHIFT, 2}, {8, SHIFT, 3}, },
			{{-1, ERROR, 1}, {13, SHIFT, 8}, },
			{{-1, ERROR, 2}, {23, SHIFT, 10}, },
			{{-1, ERROR, 3}, {23, SHIFT, 10}, },
			{{-1, ERROR, 4}, {25, ACCEPT, -1}, },
			{{-1, REDUCE, 0}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 8}, {1, SHIFT, 14}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 41}, },
			{{-1, ERROR, 11}, {4, SHIFT, 15}, },
			{{-1, REDUCE, 34}, },
			{{-1, ERROR, 13}, {4, SHIFT, 16}, },
			{{-1, ERROR, 14}, {4, SHIFT, 17}, },
			{{-1, ERROR, 15}, {16, SHIFT, 18}, },
			{{-1, ERROR, 16}, {16, SHIFT, 18}, },
			{{-1, ERROR, 17}, {2, SHIFT, 21}, },
			{{-1, ERROR, 18}, {1, SHIFT, 24}, },
			{{-1, ERROR, 19}, {0, SHIFT, 25}, {5, SHIFT, 26}, },
			{{-1, ERROR, 20}, {0, SHIFT, 28}, },
			{{-1, ERROR, 21}, {9, SHIFT, 29}, },
			{{-1, ERROR, 22}, {5, SHIFT, 31}, },
			{{-1, REDUCE, 5}, {0, SHIFT, 32}, },
			{{-1, ERROR, 24}, {24, SHIFT, 33}, },
			{{-1, ERROR, 25}, {18, SHIFT, 35}, },
			{{-1, REDUCE, 28}, },
			{{-1, ERROR, 27}, {5, SHIFT, 36}, },
			{{-1, ERROR, 28}, {17, SHIFT, 37}, },
			{{-1, ERROR, 29}, {1, SHIFT, 39}, },
			{{-1, ERROR, 30}, {0, SHIFT, 40}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 32}, {2, SHIFT, 21}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 35}, },
			{{-1, ERROR, 35}, {1, SHIFT, 42}, },
			{{-1, REDUCE, 29}, },
			{{-1, ERROR, 37}, {1, SHIFT, 43}, },
			{{-1, ERROR, 38}, {0, SHIFT, 44}, {5, SHIFT, 45}, },
			{{-1, ERROR, 39}, {23, SHIFT, 10}, },
			{{-1, ERROR, 40}, {10, SHIFT, 50}, },
			{{-1, REDUCE, 6}, },
			{{-1, ERROR, 42}, {23, SHIFT, 10}, },
			{{-1, ERROR, 43}, {23, SHIFT, 10}, },
			{{-1, ERROR, 44}, {19, SHIFT, 56}, },
			{{-1, REDUCE, 32}, },
			{{-1, ERROR, 46}, {5, SHIFT, 57}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 14}, {2, SHIFT, 58}, },
			{{-1, REDUCE, 15}, },
			{{-1, ERROR, 50}, {1, SHIFT, 59}, },
			{{-1, ERROR, 51}, {0, SHIFT, 60}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 40}, },
			{{-1, ERROR, 56}, {1, SHIFT, 61}, },
			{{-1, REDUCE, 33}, },
			{{-1, ERROR, 58}, {3, SHIFT, 62}, {23, SHIFT, 10}, },
			{{-1, ERROR, 59}, {23, SHIFT, 10}, },
			{{-1, ERROR, 60}, {11, SHIFT, 68}, },
			{{-1, ERROR, 61}, {24, SHIFT, 70}, },
			{{-1, REDUCE, 42}, },
			{{-1, ERROR, 63}, {2, SHIFT, 58}, },
			{{-1, ERROR, 64}, {3, SHIFT, 72}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 16}, {2, SHIFT, 58}, },
			{{-1, REDUCE, 17}, },
			{{-1, ERROR, 68}, {1, SHIFT, 73}, },
			{{-1, ERROR, 69}, {0, SHIFT, 74}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 43}, },
			{{-1, ERROR, 73}, {23, SHIFT, 10}, },
			{{-1, ERROR, 74}, {12, SHIFT, 78}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 18}, {2, SHIFT, 58}, },
			{{-1, REDUCE, 19}, },
			{{-1, ERROR, 78}, {1, SHIFT, 80}, },
			{{-1, ERROR, 79}, {0, SHIFT, 81}, },
			{{-1, ERROR, 80}, {23, SHIFT, 10}, },
			{{-1, ERROR, 81}, {14, SHIFT, 85}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 20}, {2, SHIFT, 58}, },
			{{-1, REDUCE, 21}, },
			{{-1, ERROR, 85}, {1, SHIFT, 87}, },
			{{-1, ERROR, 86}, {0, SHIFT, 88}, },
			{{-1, ERROR, 87}, {4, SHIFT, 89}, },
			{{-1, ERROR, 88}, {15, SHIFT, 90}, },
			{{-1, ERROR, 89}, {23, SHIFT, 10}, },
			{{-1, ERROR, 90}, {1, SHIFT, 95}, },
			{{-1, ERROR, 91}, {3, SHIFT, 96}, },
			{{-1, ERROR, 92}, {5, SHIFT, 97}, },
			{{-1, REDUCE, 22}, {0, SHIFT, 98}, },
			{{-1, REDUCE, 26}, },
			{{-1, ERROR, 95}, {4, SHIFT, 99}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 12}, },
			{{-1, ERROR, 98}, {23, SHIFT, 10}, },
			{{-1, ERROR, 99}, {23, SHIFT, 10}, },
			{{-1, REDUCE, 23}, },
			{{-1, ERROR, 101}, {5, SHIFT, 104}, },
			{{-1, REDUCE, 24}, {0, SHIFT, 105}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 13}, },
			{{-1, ERROR, 105}, {23, SHIFT, 10}, },
			{{-1, REDUCE, 25}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 4}, },
			{{-1, 5}, },
			{{-1, 9}, },
			{{-1, 22}, {32, 41}, },
			{{-1, 23}, },
			{{-1, 30}, },
			{{-1, 51}, },
			{{-1, 69}, },
			{{-1, 79}, },
			{{-1, 86}, },
			{{-1, 91}, },
			{{-1, 47}, },
			{{-1, 65}, },
			{{-1, 75}, },
			{{-1, 82}, },
			{{-1, 92}, {98, 100}, },
			{{-1, 101}, {105, 106}, },
			{{-1, 93}, },
			{{-1, 102}, },
			{{-1, 6}, },
			{{-1, 27}, },
			{{-1, 52}, },
			{{-1, 7}, },
			{{-1, 11}, {3, 13}, },
			{{-1, 19}, {16, 20}, },
			{{-1, 34}, },
			{{-1, 38}, },
			{{-1, 46}, },
			{{-1, 71}, },
			{{-1, 54}, },
			{{-1, 12}, {39, 48}, {42, 53}, {43, 55}, {58, 63}, {59, 66}, {73, 76}, {80, 83}, {89, 94}, {98, 94}, {99, 103}, {105, 103}, },
			{{-1, 49}, {58, 64}, {59, 67}, {73, 77}, {80, 84}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: '<<Participant>>', '<<InputAsset>>', '<<OutputAsset>>'",
			"expecting: 'transactions'",
			"expecting: char seq",
			"expecting: EOF",
			"expecting: '='",
			"expecting: ',', '(', '{', '}'",
			"expecting: '{'",
			"expecting: 'data'",
			"expecting: '('",
			"expecting: ',', '}'",
			"expecting: ','",
			"expecting: 'id'",
			"expecting: '}'",
			"expecting: opaqueexpr",
			"expecting: 'provenance'",
			"expecting: 'receiverAddress'",
			"expecting: 'senderPubKey'",
			"expecting: 'condition'",
			"expecting: ',', '('",
			"expecting: ')', char seq",
			"expecting: 'senderAddress'",
			"expecting: ',', ')'",
			"expecting: ')'",
			"expecting: 'digitalSignature'",
			"expecting: 'inputAssets'",
			"expecting: 'outputAssets'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 2, 3, 3, 3, 3, 4, 3, 5, 6, 6, 6, 6, 7, 7, 8, 4, 9, 10, 11, 12, 9, 13, 14, 3, 12, 15, 4, 10, 3, 8, 9, 9, 4, 3, 4, 9, 2, 16, 12, 2, 2, 17, 3, 12, 10, 18, 10, 4, 10, 12, 12, 9, 9, 4, 3, 19, 2, 20, 13, 21, 8, 22, 10, 18, 10, 4, 10, 12, 12, 21, 2, 23, 10, 18, 10, 4, 10, 2, 24, 10, 18, 10, 4, 10, 6, 25, 2, 4, 22, 12, 9, 9, 6, 9, 10, 2, 2, 12, 12, 9, 9, 22, 2, 12, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
