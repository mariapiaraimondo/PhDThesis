/* This file was generated by SableCC (http://www.sablecc.org/). */

package approfile.analysis;

import approfile.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAParticipantStereotype(AParticipantStereotype node);
    void caseAInputStereotype(AInputStereotype node);
    void caseAOutputStereotype(AOutputStereotype node);
    void caseASimpleParticipantSt(ASimpleParticipantSt node);
    void caseASimpleTransactions(ASimpleTransactions node);
    void caseASimpleTransactionList(ASimpleTransactionList node);
    void caseAListTransactionList(AListTransactionList node);
    void caseASimpleTransaction(ASimpleTransaction node);
    void caseASimpleIdClause(ASimpleIdClause node);
    void caseASimplePubkeyClause(ASimplePubkeyClause node);
    void caseASimpleSendaddClause(ASimpleSendaddClause node);
    void caseASimpleDigitalsigClause(ASimpleDigitalsigClause node);
    void caseASimpleInputAssetsClause(ASimpleInputAssetsClause node);
    void caseASimpleOutputAssetsClause(ASimpleOutputAssetsClause node);
    void caseASimpleIdName(ASimpleIdName node);
    void caseAFuncIdName(AFuncIdName node);
    void caseASimpleSenderpubkeyName(ASimpleSenderpubkeyName node);
    void caseAFuncSenderpubkeyName(AFuncSenderpubkeyName node);
    void caseASimpleSenderaddressName(ASimpleSenderaddressName node);
    void caseAFuncSenderaddressName(AFuncSenderaddressName node);
    void caseADigisimpleDigitalsignatureName(ADigisimpleDigitalsignatureName node);
    void caseADigifuncDigitalsignatureName(ADigifuncDigitalsignatureName node);
    void caseASimpleInassetsList(ASimpleInassetsList node);
    void caseAListInassetsList(AListInassetsList node);
    void caseASimpleOutassetsList(ASimpleOutassetsList node);
    void caseAListOutassetsList(AListOutassetsList node);
    void caseASimpleInputAssetName(ASimpleInputAssetName node);
    void caseASimpleOutputAssetName(ASimpleOutputAssetName node);
    void caseASimpleInputassetSt(ASimpleInputassetSt node);
    void caseASimpleProvenanceAddClause(ASimpleProvenanceAddClause node);
    void caseASimpleTransactionRef(ASimpleTransactionRef node);
    void caseASimpleOutputassetSt(ASimpleOutputassetSt node);
    void caseASimpleAssetRef(ASimpleAssetRef node);
    void caseASimpleDataClause(ASimpleDataClause node);
    void caseASimpleDataPayload(ASimpleDataPayload node);
    void caseASimpleRecAddressClause(ASimpleRecAddressClause node);
    void caseASimpleConditionClause(ASimpleConditionClause node);
    void caseASimpleConditionPayload(ASimpleConditionPayload node);
    void caseASimpleParticipantRef(ASimpleParticipantRef node);
    void caseASimpleName(ASimpleName node);
    void caseASimpleFuncName(ASimpleFuncName node);
    void caseANestedFuncName(ANestedFuncName node);

    void caseTComma(TComma node);
    void caseTEquals(TEquals node);
    void caseTOpenRound(TOpenRound node);
    void caseTCloseRound(TCloseRound node);
    void caseTOpenCurly(TOpenCurly node);
    void caseTCloseCurly(TCloseCurly node);
    void caseTParticipantStereotype(TParticipantStereotype node);
    void caseTInputassetStereotype(TInputassetStereotype node);
    void caseTOutputassetStereotype(TOutputassetStereotype node);
    void caseTIdTaggedtok(TIdTaggedtok node);
    void caseTSenderpubkeyTaggedtok(TSenderpubkeyTaggedtok node);
    void caseTSenderaddressTaggedtok(TSenderaddressTaggedtok node);
    void caseTDigitalsignatureTaggedtok(TDigitalsignatureTaggedtok node);
    void caseTTransactionTaggedtok(TTransactionTaggedtok node);
    void caseTInputassetsTaggedtok(TInputassetsTaggedtok node);
    void caseTOutputassetsTaggedtok(TOutputassetsTaggedtok node);
    void caseTDataTaggedtok(TDataTaggedtok node);
    void caseTReceiverTaggedtok(TReceiverTaggedtok node);
    void caseTProvenanceTaggedtok(TProvenanceTaggedtok node);
    void caseTConditionTaggedtok(TConditionTaggedtok node);
    void caseTFreshTok(TFreshTok node);
    void caseTAuthenticTok(TAuthenticTok node);
    void caseTConfidentialTok(TConfidentialTok node);
    void caseTCharSeq(TCharSeq node);
    void caseTOpaqueexpr(TOpaqueexpr node);
    void caseTIgn(TIgn node);
    void caseTNewLine(TNewLine node);
    void caseTBlank(TBlank node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
