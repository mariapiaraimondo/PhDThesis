/* This file was generated by SableCC (http://www.sablecc.org/). */

package approfile.node;

import approfile.analysis.*;

@SuppressWarnings("nls")
public final class ASimpleIdClause extends PIdClause
{
    private TIdTaggedtok _idTaggedtok_;
    private TEquals _equals_;
    private PIdName _idName_;

    public ASimpleIdClause()
    {
        // Constructor
    }

    public ASimpleIdClause(
        @SuppressWarnings("hiding") TIdTaggedtok _idTaggedtok_,
        @SuppressWarnings("hiding") TEquals _equals_,
        @SuppressWarnings("hiding") PIdName _idName_)
    {
        // Constructor
        setIdTaggedtok(_idTaggedtok_);

        setEquals(_equals_);

        setIdName(_idName_);

    }

    @Override
    public Object clone()
    {
        return new ASimpleIdClause(
            cloneNode(this._idTaggedtok_),
            cloneNode(this._equals_),
            cloneNode(this._idName_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASimpleIdClause(this);
    }

    public TIdTaggedtok getIdTaggedtok()
    {
        return this._idTaggedtok_;
    }

    public void setIdTaggedtok(TIdTaggedtok node)
    {
        if(this._idTaggedtok_ != null)
        {
            this._idTaggedtok_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._idTaggedtok_ = node;
    }

    public TEquals getEquals()
    {
        return this._equals_;
    }

    public void setEquals(TEquals node)
    {
        if(this._equals_ != null)
        {
            this._equals_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._equals_ = node;
    }

    public PIdName getIdName()
    {
        return this._idName_;
    }

    public void setIdName(PIdName node)
    {
        if(this._idName_ != null)
        {
            this._idName_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._idName_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._idTaggedtok_)
            + toString(this._equals_)
            + toString(this._idName_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._idTaggedtok_ == child)
        {
            this._idTaggedtok_ = null;
            return;
        }

        if(this._equals_ == child)
        {
            this._equals_ = null;
            return;
        }

        if(this._idName_ == child)
        {
            this._idName_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._idTaggedtok_ == oldChild)
        {
            setIdTaggedtok((TIdTaggedtok) newChild);
            return;
        }

        if(this._equals_ == oldChild)
        {
            setEquals((TEquals) newChild);
            return;
        }

        if(this._idName_ == oldChild)
        {
            setIdName((PIdName) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
