/* This file was generated by SableCC (http://www.sablecc.org/). */

package approfile.node;

import approfile.analysis.*;

@SuppressWarnings("nls")
public final class ASimpleSendaddClause extends PSendaddClause
{
    private TSenderaddressTaggedtok _senderaddressTaggedtok_;
    private TEquals _equals_;
    private PSenderaddressName _senderaddressName_;

    public ASimpleSendaddClause()
    {
        // Constructor
    }

    public ASimpleSendaddClause(
        @SuppressWarnings("hiding") TSenderaddressTaggedtok _senderaddressTaggedtok_,
        @SuppressWarnings("hiding") TEquals _equals_,
        @SuppressWarnings("hiding") PSenderaddressName _senderaddressName_)
    {
        // Constructor
        setSenderaddressTaggedtok(_senderaddressTaggedtok_);

        setEquals(_equals_);

        setSenderaddressName(_senderaddressName_);

    }

    @Override
    public Object clone()
    {
        return new ASimpleSendaddClause(
            cloneNode(this._senderaddressTaggedtok_),
            cloneNode(this._equals_),
            cloneNode(this._senderaddressName_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASimpleSendaddClause(this);
    }

    public TSenderaddressTaggedtok getSenderaddressTaggedtok()
    {
        return this._senderaddressTaggedtok_;
    }

    public void setSenderaddressTaggedtok(TSenderaddressTaggedtok node)
    {
        if(this._senderaddressTaggedtok_ != null)
        {
            this._senderaddressTaggedtok_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._senderaddressTaggedtok_ = node;
    }

    public TEquals getEquals()
    {
        return this._equals_;
    }

    public void setEquals(TEquals node)
    {
        if(this._equals_ != null)
        {
            this._equals_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._equals_ = node;
    }

    public PSenderaddressName getSenderaddressName()
    {
        return this._senderaddressName_;
    }

    public void setSenderaddressName(PSenderaddressName node)
    {
        if(this._senderaddressName_ != null)
        {
            this._senderaddressName_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._senderaddressName_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._senderaddressTaggedtok_)
            + toString(this._equals_)
            + toString(this._senderaddressName_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._senderaddressTaggedtok_ == child)
        {
            this._senderaddressTaggedtok_ = null;
            return;
        }

        if(this._equals_ == child)
        {
            this._equals_ = null;
            return;
        }

        if(this._senderaddressName_ == child)
        {
            this._senderaddressName_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._senderaddressTaggedtok_ == oldChild)
        {
            setSenderaddressTaggedtok((TSenderaddressTaggedtok) newChild);
            return;
        }

        if(this._equals_ == oldChild)
        {
            setEquals((TEquals) newChild);
            return;
        }

        if(this._senderaddressName_ == oldChild)
        {
            setSenderaddressName((PSenderaddressName) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
