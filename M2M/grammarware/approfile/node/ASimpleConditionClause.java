/* This file was generated by SableCC (http://www.sablecc.org/). */

package approfile.node;

import approfile.analysis.*;

@SuppressWarnings("nls")
public final class ASimpleConditionClause extends PConditionClause
{
    private TComma _comma_;
    private TConditionTaggedtok _conditionTaggedtok_;
    private TEquals _equals_;
    private PConditionPayload _conditionPayload_;

    public ASimpleConditionClause()
    {
        // Constructor
    }

    public ASimpleConditionClause(
        @SuppressWarnings("hiding") TComma _comma_,
        @SuppressWarnings("hiding") TConditionTaggedtok _conditionTaggedtok_,
        @SuppressWarnings("hiding") TEquals _equals_,
        @SuppressWarnings("hiding") PConditionPayload _conditionPayload_)
    {
        // Constructor
        setComma(_comma_);

        setConditionTaggedtok(_conditionTaggedtok_);

        setEquals(_equals_);

        setConditionPayload(_conditionPayload_);

    }

    @Override
    public Object clone()
    {
        return new ASimpleConditionClause(
            cloneNode(this._comma_),
            cloneNode(this._conditionTaggedtok_),
            cloneNode(this._equals_),
            cloneNode(this._conditionPayload_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASimpleConditionClause(this);
    }

    public TComma getComma()
    {
        return this._comma_;
    }

    public void setComma(TComma node)
    {
        if(this._comma_ != null)
        {
            this._comma_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._comma_ = node;
    }

    public TConditionTaggedtok getConditionTaggedtok()
    {
        return this._conditionTaggedtok_;
    }

    public void setConditionTaggedtok(TConditionTaggedtok node)
    {
        if(this._conditionTaggedtok_ != null)
        {
            this._conditionTaggedtok_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._conditionTaggedtok_ = node;
    }

    public TEquals getEquals()
    {
        return this._equals_;
    }

    public void setEquals(TEquals node)
    {
        if(this._equals_ != null)
        {
            this._equals_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._equals_ = node;
    }

    public PConditionPayload getConditionPayload()
    {
        return this._conditionPayload_;
    }

    public void setConditionPayload(PConditionPayload node)
    {
        if(this._conditionPayload_ != null)
        {
            this._conditionPayload_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._conditionPayload_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._comma_)
            + toString(this._conditionTaggedtok_)
            + toString(this._equals_)
            + toString(this._conditionPayload_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._comma_ == child)
        {
            this._comma_ = null;
            return;
        }

        if(this._conditionTaggedtok_ == child)
        {
            this._conditionTaggedtok_ = null;
            return;
        }

        if(this._equals_ == child)
        {
            this._equals_ = null;
            return;
        }

        if(this._conditionPayload_ == child)
        {
            this._conditionPayload_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._comma_ == oldChild)
        {
            setComma((TComma) newChild);
            return;
        }

        if(this._conditionTaggedtok_ == oldChild)
        {
            setConditionTaggedtok((TConditionTaggedtok) newChild);
            return;
        }

        if(this._equals_ == oldChild)
        {
            setEquals((TEquals) newChild);
            return;
        }

        if(this._conditionPayload_ == oldChild)
        {
            setConditionPayload((PConditionPayload) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
