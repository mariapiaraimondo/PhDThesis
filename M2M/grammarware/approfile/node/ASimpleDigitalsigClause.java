/* This file was generated by SableCC (http://www.sablecc.org/). */

package approfile.node;

import approfile.analysis.*;

@SuppressWarnings("nls")
public final class ASimpleDigitalsigClause extends PDigitalsigClause
{
    private TDigitalsignatureTaggedtok _digitalsignatureTaggedtok_;
    private TEquals _equals_;
    private PDigitalsignatureName _digitalsignatureName_;

    public ASimpleDigitalsigClause()
    {
        // Constructor
    }

    public ASimpleDigitalsigClause(
        @SuppressWarnings("hiding") TDigitalsignatureTaggedtok _digitalsignatureTaggedtok_,
        @SuppressWarnings("hiding") TEquals _equals_,
        @SuppressWarnings("hiding") PDigitalsignatureName _digitalsignatureName_)
    {
        // Constructor
        setDigitalsignatureTaggedtok(_digitalsignatureTaggedtok_);

        setEquals(_equals_);

        setDigitalsignatureName(_digitalsignatureName_);

    }

    @Override
    public Object clone()
    {
        return new ASimpleDigitalsigClause(
            cloneNode(this._digitalsignatureTaggedtok_),
            cloneNode(this._equals_),
            cloneNode(this._digitalsignatureName_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASimpleDigitalsigClause(this);
    }

    public TDigitalsignatureTaggedtok getDigitalsignatureTaggedtok()
    {
        return this._digitalsignatureTaggedtok_;
    }

    public void setDigitalsignatureTaggedtok(TDigitalsignatureTaggedtok node)
    {
        if(this._digitalsignatureTaggedtok_ != null)
        {
            this._digitalsignatureTaggedtok_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._digitalsignatureTaggedtok_ = node;
    }

    public TEquals getEquals()
    {
        return this._equals_;
    }

    public void setEquals(TEquals node)
    {
        if(this._equals_ != null)
        {
            this._equals_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._equals_ = node;
    }

    public PDigitalsignatureName getDigitalsignatureName()
    {
        return this._digitalsignatureName_;
    }

    public void setDigitalsignatureName(PDigitalsignatureName node)
    {
        if(this._digitalsignatureName_ != null)
        {
            this._digitalsignatureName_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._digitalsignatureName_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._digitalsignatureTaggedtok_)
            + toString(this._equals_)
            + toString(this._digitalsignatureName_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._digitalsignatureTaggedtok_ == child)
        {
            this._digitalsignatureTaggedtok_ = null;
            return;
        }

        if(this._equals_ == child)
        {
            this._equals_ = null;
            return;
        }

        if(this._digitalsignatureName_ == child)
        {
            this._digitalsignatureName_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._digitalsignatureTaggedtok_ == oldChild)
        {
            setDigitalsignatureTaggedtok((TDigitalsignatureTaggedtok) newChild);
            return;
        }

        if(this._equals_ == oldChild)
        {
            setEquals((TEquals) newChild);
            return;
        }

        if(this._digitalsignatureName_ == oldChild)
        {
            setDigitalsignatureName((PDigitalsignatureName) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
