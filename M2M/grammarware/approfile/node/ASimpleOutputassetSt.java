/* This file was generated by SableCC (http://www.sablecc.org/). */

package approfile.node;

import approfile.analysis.*;

@SuppressWarnings("nls")
public final class ASimpleOutputassetSt extends POutputassetSt
{
    private TOutputassetStereotype _outputassetStereotype_;
    private PAssetRef _assetRef_;
    private TOpenCurly _openCurly_;
    private PDataClause _dataClause_;
    private TComma _c0_;
    private PRecAddressClause _recAddressClause_;
    private PConditionClause _conditionClause_;
    private TCloseCurly _closeCurly_;

    public ASimpleOutputassetSt()
    {
        // Constructor
    }

    public ASimpleOutputassetSt(
        @SuppressWarnings("hiding") TOutputassetStereotype _outputassetStereotype_,
        @SuppressWarnings("hiding") PAssetRef _assetRef_,
        @SuppressWarnings("hiding") TOpenCurly _openCurly_,
        @SuppressWarnings("hiding") PDataClause _dataClause_,
        @SuppressWarnings("hiding") TComma _c0_,
        @SuppressWarnings("hiding") PRecAddressClause _recAddressClause_,
        @SuppressWarnings("hiding") PConditionClause _conditionClause_,
        @SuppressWarnings("hiding") TCloseCurly _closeCurly_)
    {
        // Constructor
        setOutputassetStereotype(_outputassetStereotype_);

        setAssetRef(_assetRef_);

        setOpenCurly(_openCurly_);

        setDataClause(_dataClause_);

        setC0(_c0_);

        setRecAddressClause(_recAddressClause_);

        setConditionClause(_conditionClause_);

        setCloseCurly(_closeCurly_);

    }

    @Override
    public Object clone()
    {
        return new ASimpleOutputassetSt(
            cloneNode(this._outputassetStereotype_),
            cloneNode(this._assetRef_),
            cloneNode(this._openCurly_),
            cloneNode(this._dataClause_),
            cloneNode(this._c0_),
            cloneNode(this._recAddressClause_),
            cloneNode(this._conditionClause_),
            cloneNode(this._closeCurly_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASimpleOutputassetSt(this);
    }

    public TOutputassetStereotype getOutputassetStereotype()
    {
        return this._outputassetStereotype_;
    }

    public void setOutputassetStereotype(TOutputassetStereotype node)
    {
        if(this._outputassetStereotype_ != null)
        {
            this._outputassetStereotype_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._outputassetStereotype_ = node;
    }

    public PAssetRef getAssetRef()
    {
        return this._assetRef_;
    }

    public void setAssetRef(PAssetRef node)
    {
        if(this._assetRef_ != null)
        {
            this._assetRef_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._assetRef_ = node;
    }

    public TOpenCurly getOpenCurly()
    {
        return this._openCurly_;
    }

    public void setOpenCurly(TOpenCurly node)
    {
        if(this._openCurly_ != null)
        {
            this._openCurly_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._openCurly_ = node;
    }

    public PDataClause getDataClause()
    {
        return this._dataClause_;
    }

    public void setDataClause(PDataClause node)
    {
        if(this._dataClause_ != null)
        {
            this._dataClause_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._dataClause_ = node;
    }

    public TComma getC0()
    {
        return this._c0_;
    }

    public void setC0(TComma node)
    {
        if(this._c0_ != null)
        {
            this._c0_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._c0_ = node;
    }

    public PRecAddressClause getRecAddressClause()
    {
        return this._recAddressClause_;
    }

    public void setRecAddressClause(PRecAddressClause node)
    {
        if(this._recAddressClause_ != null)
        {
            this._recAddressClause_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._recAddressClause_ = node;
    }

    public PConditionClause getConditionClause()
    {
        return this._conditionClause_;
    }

    public void setConditionClause(PConditionClause node)
    {
        if(this._conditionClause_ != null)
        {
            this._conditionClause_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._conditionClause_ = node;
    }

    public TCloseCurly getCloseCurly()
    {
        return this._closeCurly_;
    }

    public void setCloseCurly(TCloseCurly node)
    {
        if(this._closeCurly_ != null)
        {
            this._closeCurly_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._closeCurly_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._outputassetStereotype_)
            + toString(this._assetRef_)
            + toString(this._openCurly_)
            + toString(this._dataClause_)
            + toString(this._c0_)
            + toString(this._recAddressClause_)
            + toString(this._conditionClause_)
            + toString(this._closeCurly_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._outputassetStereotype_ == child)
        {
            this._outputassetStereotype_ = null;
            return;
        }

        if(this._assetRef_ == child)
        {
            this._assetRef_ = null;
            return;
        }

        if(this._openCurly_ == child)
        {
            this._openCurly_ = null;
            return;
        }

        if(this._dataClause_ == child)
        {
            this._dataClause_ = null;
            return;
        }

        if(this._c0_ == child)
        {
            this._c0_ = null;
            return;
        }

        if(this._recAddressClause_ == child)
        {
            this._recAddressClause_ = null;
            return;
        }

        if(this._conditionClause_ == child)
        {
            this._conditionClause_ = null;
            return;
        }

        if(this._closeCurly_ == child)
        {
            this._closeCurly_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._outputassetStereotype_ == oldChild)
        {
            setOutputassetStereotype((TOutputassetStereotype) newChild);
            return;
        }

        if(this._assetRef_ == oldChild)
        {
            setAssetRef((PAssetRef) newChild);
            return;
        }

        if(this._openCurly_ == oldChild)
        {
            setOpenCurly((TOpenCurly) newChild);
            return;
        }

        if(this._dataClause_ == oldChild)
        {
            setDataClause((PDataClause) newChild);
            return;
        }

        if(this._c0_ == oldChild)
        {
            setC0((TComma) newChild);
            return;
        }

        if(this._recAddressClause_ == oldChild)
        {
            setRecAddressClause((PRecAddressClause) newChild);
            return;
        }

        if(this._conditionClause_ == oldChild)
        {
            setConditionClause((PConditionClause) newChild);
            return;
        }

        if(this._closeCurly_ == oldChild)
        {
            setCloseCurly((TCloseCurly) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
