/* This file was generated by SableCC (http://www.sablecc.org/). */

package approfile.node;

import approfile.analysis.*;

@SuppressWarnings("nls")
public final class ASimplePubkeyClause extends PPubkeyClause
{
    private TSenderpubkeyTaggedtok _senderpubkeyTaggedtok_;
    private TEquals _equals_;
    private PSenderpubkeyName _senderpubkeyName_;

    public ASimplePubkeyClause()
    {
        // Constructor
    }

    public ASimplePubkeyClause(
        @SuppressWarnings("hiding") TSenderpubkeyTaggedtok _senderpubkeyTaggedtok_,
        @SuppressWarnings("hiding") TEquals _equals_,
        @SuppressWarnings("hiding") PSenderpubkeyName _senderpubkeyName_)
    {
        // Constructor
        setSenderpubkeyTaggedtok(_senderpubkeyTaggedtok_);

        setEquals(_equals_);

        setSenderpubkeyName(_senderpubkeyName_);

    }

    @Override
    public Object clone()
    {
        return new ASimplePubkeyClause(
            cloneNode(this._senderpubkeyTaggedtok_),
            cloneNode(this._equals_),
            cloneNode(this._senderpubkeyName_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASimplePubkeyClause(this);
    }

    public TSenderpubkeyTaggedtok getSenderpubkeyTaggedtok()
    {
        return this._senderpubkeyTaggedtok_;
    }

    public void setSenderpubkeyTaggedtok(TSenderpubkeyTaggedtok node)
    {
        if(this._senderpubkeyTaggedtok_ != null)
        {
            this._senderpubkeyTaggedtok_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._senderpubkeyTaggedtok_ = node;
    }

    public TEquals getEquals()
    {
        return this._equals_;
    }

    public void setEquals(TEquals node)
    {
        if(this._equals_ != null)
        {
            this._equals_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._equals_ = node;
    }

    public PSenderpubkeyName getSenderpubkeyName()
    {
        return this._senderpubkeyName_;
    }

    public void setSenderpubkeyName(PSenderpubkeyName node)
    {
        if(this._senderpubkeyName_ != null)
        {
            this._senderpubkeyName_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._senderpubkeyName_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._senderpubkeyTaggedtok_)
            + toString(this._equals_)
            + toString(this._senderpubkeyName_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._senderpubkeyTaggedtok_ == child)
        {
            this._senderpubkeyTaggedtok_ = null;
            return;
        }

        if(this._equals_ == child)
        {
            this._equals_ = null;
            return;
        }

        if(this._senderpubkeyName_ == child)
        {
            this._senderpubkeyName_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._senderpubkeyTaggedtok_ == oldChild)
        {
            setSenderpubkeyTaggedtok((TSenderpubkeyTaggedtok) newChild);
            return;
        }

        if(this._equals_ == oldChild)
        {
            setEquals((TEquals) newChild);
            return;
        }

        if(this._senderpubkeyName_ == oldChild)
        {
            setSenderpubkeyName((PSenderpubkeyName) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
