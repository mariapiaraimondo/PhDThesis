/* This file was generated by SableCC (http://www.sablecc.org/). */

package approfile.node;

import approfile.analysis.*;

@SuppressWarnings("nls")
public final class ASimpleProvenanceAddClause extends PProvenanceAddClause
{
    private TComma _comma_;
    private TProvenanceTaggedtok _provenanceTaggedtok_;
    private TEquals _equals_;
    private PTransactionRef _transactionRef_;

    public ASimpleProvenanceAddClause()
    {
        // Constructor
    }

    public ASimpleProvenanceAddClause(
        @SuppressWarnings("hiding") TComma _comma_,
        @SuppressWarnings("hiding") TProvenanceTaggedtok _provenanceTaggedtok_,
        @SuppressWarnings("hiding") TEquals _equals_,
        @SuppressWarnings("hiding") PTransactionRef _transactionRef_)
    {
        // Constructor
        setComma(_comma_);

        setProvenanceTaggedtok(_provenanceTaggedtok_);

        setEquals(_equals_);

        setTransactionRef(_transactionRef_);

    }

    @Override
    public Object clone()
    {
        return new ASimpleProvenanceAddClause(
            cloneNode(this._comma_),
            cloneNode(this._provenanceTaggedtok_),
            cloneNode(this._equals_),
            cloneNode(this._transactionRef_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASimpleProvenanceAddClause(this);
    }

    public TComma getComma()
    {
        return this._comma_;
    }

    public void setComma(TComma node)
    {
        if(this._comma_ != null)
        {
            this._comma_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._comma_ = node;
    }

    public TProvenanceTaggedtok getProvenanceTaggedtok()
    {
        return this._provenanceTaggedtok_;
    }

    public void setProvenanceTaggedtok(TProvenanceTaggedtok node)
    {
        if(this._provenanceTaggedtok_ != null)
        {
            this._provenanceTaggedtok_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._provenanceTaggedtok_ = node;
    }

    public TEquals getEquals()
    {
        return this._equals_;
    }

    public void setEquals(TEquals node)
    {
        if(this._equals_ != null)
        {
            this._equals_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._equals_ = node;
    }

    public PTransactionRef getTransactionRef()
    {
        return this._transactionRef_;
    }

    public void setTransactionRef(PTransactionRef node)
    {
        if(this._transactionRef_ != null)
        {
            this._transactionRef_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._transactionRef_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._comma_)
            + toString(this._provenanceTaggedtok_)
            + toString(this._equals_)
            + toString(this._transactionRef_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._comma_ == child)
        {
            this._comma_ = null;
            return;
        }

        if(this._provenanceTaggedtok_ == child)
        {
            this._provenanceTaggedtok_ = null;
            return;
        }

        if(this._equals_ == child)
        {
            this._equals_ = null;
            return;
        }

        if(this._transactionRef_ == child)
        {
            this._transactionRef_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._comma_ == oldChild)
        {
            setComma((TComma) newChild);
            return;
        }

        if(this._provenanceTaggedtok_ == oldChild)
        {
            setProvenanceTaggedtok((TProvenanceTaggedtok) newChild);
            return;
        }

        if(this._equals_ == oldChild)
        {
            setEquals((TEquals) newChild);
            return;
        }

        if(this._transactionRef_ == oldChild)
        {
            setTransactionRef((PTransactionRef) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
