/* This file was generated by SableCC (http://www.sablecc.org/). */

package protocol.analysis;

import java.util.*;
import protocol.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPDataCondition().apply(this);
        outStart(node);
    }

    public void inADataDataCondition(ADataDataCondition node)
    {
        defaultIn(node);
    }

    public void outADataDataCondition(ADataDataCondition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADataDataCondition(ADataDataCondition node)
    {
        inADataDataCondition(node);
        if(node.getDataClause() != null)
        {
            node.getDataClause().apply(this);
        }
        outADataDataCondition(node);
    }

    public void inAConditionDataCondition(AConditionDataCondition node)
    {
        defaultIn(node);
    }

    public void outAConditionDataCondition(AConditionDataCondition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConditionDataCondition(AConditionDataCondition node)
    {
        inAConditionDataCondition(node);
        if(node.getConditionClause() != null)
        {
            node.getConditionClause().apply(this);
        }
        outAConditionDataCondition(node);
    }

    public void inASimpleDataClause(ASimpleDataClause node)
    {
        defaultIn(node);
    }

    public void outASimpleDataClause(ASimpleDataClause node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleDataClause(ASimpleDataClause node)
    {
        inASimpleDataClause(node);
        if(node.getDataExpression() != null)
        {
            node.getDataExpression().apply(this);
        }
        outASimpleDataClause(node);
    }

    public void inAListDataClause(AListDataClause node)
    {
        defaultIn(node);
    }

    public void outAListDataClause(AListDataClause node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListDataClause(AListDataClause node)
    {
        inAListDataClause(node);
        if(node.getDataClause() != null)
        {
            node.getDataClause().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getDataExpression() != null)
        {
            node.getDataExpression().apply(this);
        }
        outAListDataClause(node);
    }

    public void inAListDataExpression(AListDataExpression node)
    {
        defaultIn(node);
    }

    public void outAListDataExpression(AListDataExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListDataExpression(AListDataExpression node)
    {
        inAListDataExpression(node);
        if(node.getDataFunction() != null)
        {
            node.getDataFunction().apply(this);
        }
        if(node.getCloseCurly() != null)
        {
            node.getCloseCurly().apply(this);
        }
        if(node.getAtomicList() != null)
        {
            node.getAtomicList().apply(this);
        }
        if(node.getOpenCurly() != null)
        {
            node.getOpenCurly().apply(this);
        }
        outAListDataExpression(node);
    }

    public void inASimpleAtomicList(ASimpleAtomicList node)
    {
        defaultIn(node);
    }

    public void outASimpleAtomicList(ASimpleAtomicList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleAtomicList(ASimpleAtomicList node)
    {
        inASimpleAtomicList(node);
        if(node.getArgument() != null)
        {
            node.getArgument().apply(this);
        }
        outASimpleAtomicList(node);
    }

    public void inAListAtomicList(AListAtomicList node)
    {
        defaultIn(node);
    }

    public void outAListAtomicList(AListAtomicList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListAtomicList(AListAtomicList node)
    {
        inAListAtomicList(node);
        if(node.getAtomicList() != null)
        {
            node.getAtomicList().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getArgument() != null)
        {
            node.getArgument().apply(this);
        }
        outAListAtomicList(node);
    }

    public void inAVariableArgument(AVariableArgument node)
    {
        defaultIn(node);
    }

    public void outAVariableArgument(AVariableArgument node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariableArgument(AVariableArgument node)
    {
        inAVariableArgument(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outAVariableArgument(node);
    }

    public void inAFunctionArgument(AFunctionArgument node)
    {
        defaultIn(node);
    }

    public void outAFunctionArgument(AFunctionArgument node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionArgument(AFunctionArgument node)
    {
        inAFunctionArgument(node);
        if(node.getFunction() != null)
        {
            node.getFunction().apply(this);
        }
        outAFunctionArgument(node);
    }

    public void inARecursiveArgument(ARecursiveArgument node)
    {
        defaultIn(node);
    }

    public void outARecursiveArgument(ARecursiveArgument node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARecursiveArgument(ARecursiveArgument node)
    {
        inARecursiveArgument(node);
        if(node.getDataExpression() != null)
        {
            node.getDataExpression().apply(this);
        }
        outARecursiveArgument(node);
    }

    public void inAEmptyFunction(AEmptyFunction node)
    {
        defaultIn(node);
    }

    public void outAEmptyFunction(AEmptyFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyFunction(AEmptyFunction node)
    {
        inAEmptyFunction(node);
        if(node.getEmptyTok() != null)
        {
            node.getEmptyTok().apply(this);
        }
        outAEmptyFunction(node);
    }

    public void inAHashFunction(AHashFunction node)
    {
        defaultIn(node);
    }

    public void outAHashFunction(AHashFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAHashFunction(AHashFunction node)
    {
        inAHashFunction(node);
        if(node.getHashClause() != null)
        {
            node.getHashClause().apply(this);
        }
        outAHashFunction(node);
    }

    public void inAIdFunction(AIdFunction node)
    {
        defaultIn(node);
    }

    public void outAIdFunction(AIdFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdFunction(AIdFunction node)
    {
        inAIdFunction(node);
        if(node.getIdClause() != null)
        {
            node.getIdClause().apply(this);
        }
        outAIdFunction(node);
    }

    public void inAFreshFunction(AFreshFunction node)
    {
        defaultIn(node);
    }

    public void outAFreshFunction(AFreshFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFreshFunction(AFreshFunction node)
    {
        inAFreshFunction(node);
        if(node.getFreshClause() != null)
        {
            node.getFreshClause().apply(this);
        }
        outAFreshFunction(node);
    }

    public void inAPubkeyFunction(APubkeyFunction node)
    {
        defaultIn(node);
    }

    public void outAPubkeyFunction(APubkeyFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPubkeyFunction(APubkeyFunction node)
    {
        inAPubkeyFunction(node);
        if(node.getPubkeyClause() != null)
        {
            node.getPubkeyClause().apply(this);
        }
        outAPubkeyFunction(node);
    }

    public void inASignatureFunction(ASignatureFunction node)
    {
        defaultIn(node);
    }

    public void outASignatureFunction(ASignatureFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASignatureFunction(ASignatureFunction node)
    {
        inASignatureFunction(node);
        if(node.getSignatureClause() != null)
        {
            node.getSignatureClause().apply(this);
        }
        outASignatureFunction(node);
    }

    public void inAPubkeyDataFunction(APubkeyDataFunction node)
    {
        defaultIn(node);
    }

    public void outAPubkeyDataFunction(APubkeyDataFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPubkeyDataFunction(APubkeyDataFunction node)
    {
        inAPubkeyDataFunction(node);
        if(node.getPubkeyClause() != null)
        {
            node.getPubkeyClause().apply(this);
        }
        outAPubkeyDataFunction(node);
    }

    public void inASignatureDataFunction(ASignatureDataFunction node)
    {
        defaultIn(node);
    }

    public void outASignatureDataFunction(ASignatureDataFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASignatureDataFunction(ASignatureDataFunction node)
    {
        inASignatureDataFunction(node);
        if(node.getSignatureClause() != null)
        {
            node.getSignatureClause().apply(this);
        }
        outASignatureDataFunction(node);
    }

    public void inASimpleIdClause(ASimpleIdClause node)
    {
        defaultIn(node);
    }

    public void outASimpleIdClause(ASimpleIdClause node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleIdClause(ASimpleIdClause node)
    {
        inASimpleIdClause(node);
        if(node.getCloseRound() != null)
        {
            node.getCloseRound().apply(this);
        }
        if(node.getArgument() != null)
        {
            node.getArgument().apply(this);
        }
        if(node.getOpenRound() != null)
        {
            node.getOpenRound().apply(this);
        }
        if(node.getIdTok() != null)
        {
            node.getIdTok().apply(this);
        }
        outASimpleIdClause(node);
    }

    public void inASimpleFreshClause(ASimpleFreshClause node)
    {
        defaultIn(node);
    }

    public void outASimpleFreshClause(ASimpleFreshClause node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleFreshClause(ASimpleFreshClause node)
    {
        inASimpleFreshClause(node);
        if(node.getCloseRound() != null)
        {
            node.getCloseRound().apply(this);
        }
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        if(node.getOpenRound() != null)
        {
            node.getOpenRound().apply(this);
        }
        if(node.getFreshTok() != null)
        {
            node.getFreshTok().apply(this);
        }
        outASimpleFreshClause(node);
    }

    public void inASimpleHashClause(ASimpleHashClause node)
    {
        defaultIn(node);
    }

    public void outASimpleHashClause(ASimpleHashClause node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleHashClause(ASimpleHashClause node)
    {
        inASimpleHashClause(node);
        if(node.getCloseRound() != null)
        {
            node.getCloseRound().apply(this);
        }
        if(node.getArgument() != null)
        {
            node.getArgument().apply(this);
        }
        if(node.getOpenRound() != null)
        {
            node.getOpenRound().apply(this);
        }
        if(node.getHashTok() != null)
        {
            node.getHashTok().apply(this);
        }
        outASimpleHashClause(node);
    }

    public void inASimplePubkeyClause(ASimplePubkeyClause node)
    {
        defaultIn(node);
    }

    public void outASimplePubkeyClause(ASimplePubkeyClause node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimplePubkeyClause(ASimplePubkeyClause node)
    {
        inASimplePubkeyClause(node);
        if(node.getCloseRound() != null)
        {
            node.getCloseRound().apply(this);
        }
        if(node.getArgument() != null)
        {
            node.getArgument().apply(this);
        }
        if(node.getOpenRound() != null)
        {
            node.getOpenRound().apply(this);
        }
        if(node.getPubkeyTok() != null)
        {
            node.getPubkeyTok().apply(this);
        }
        outASimplePubkeyClause(node);
    }

    public void inASimpleSignatureClause(ASimpleSignatureClause node)
    {
        defaultIn(node);
    }

    public void outASimpleSignatureClause(ASimpleSignatureClause node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleSignatureClause(ASimpleSignatureClause node)
    {
        inASimpleSignatureClause(node);
        if(node.getCloseRound() != null)
        {
            node.getCloseRound().apply(this);
        }
        if(node.getArgument() != null)
        {
            node.getArgument().apply(this);
        }
        if(node.getOpenRound() != null)
        {
            node.getOpenRound().apply(this);
        }
        if(node.getSignatureTok() != null)
        {
            node.getSignatureTok().apply(this);
        }
        outASimpleSignatureClause(node);
    }

    public void inASecretConditionClause(ASecretConditionClause node)
    {
        defaultIn(node);
    }

    public void outASecretConditionClause(ASecretConditionClause node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASecretConditionClause(ASecretConditionClause node)
    {
        inASecretConditionClause(node);
        if(node.getSecretClause() != null)
        {
            node.getSecretClause().apply(this);
        }
        outASecretConditionClause(node);
    }

    public void inAWauthConditionClause(AWauthConditionClause node)
    {
        defaultIn(node);
    }

    public void outAWauthConditionClause(AWauthConditionClause node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWauthConditionClause(AWauthConditionClause node)
    {
        inAWauthConditionClause(node);
        if(node.getWeakauthClause() != null)
        {
            node.getWeakauthClause().apply(this);
        }
        outAWauthConditionClause(node);
    }

    public void inASimpleSecretClause(ASimpleSecretClause node)
    {
        defaultIn(node);
    }

    public void outASimpleSecretClause(ASimpleSecretClause node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleSecretClause(ASimpleSecretClause node)
    {
        inASimpleSecretClause(node);
        if(node.getCloseRound() != null)
        {
            node.getCloseRound().apply(this);
        }
        if(node.getArgument() != null)
        {
            node.getArgument().apply(this);
        }
        if(node.getC1() != null)
        {
            node.getC1().apply(this);
        }
        if(node.getS1() != null)
        {
            node.getS1().apply(this);
        }
        if(node.getC0() != null)
        {
            node.getC0().apply(this);
        }
        if(node.getS0() != null)
        {
            node.getS0().apply(this);
        }
        if(node.getOpenRound() != null)
        {
            node.getOpenRound().apply(this);
        }
        if(node.getSecretTok() != null)
        {
            node.getSecretTok().apply(this);
        }
        outASimpleSecretClause(node);
    }

    public void inASimpleWeakauthClause(ASimpleWeakauthClause node)
    {
        defaultIn(node);
    }

    public void outASimpleWeakauthClause(ASimpleWeakauthClause node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleWeakauthClause(ASimpleWeakauthClause node)
    {
        inASimpleWeakauthClause(node);
        if(node.getCloseRound() != null)
        {
            node.getCloseRound().apply(this);
        }
        if(node.getArgument() != null)
        {
            node.getArgument().apply(this);
        }
        if(node.getC1() != null)
        {
            node.getC1().apply(this);
        }
        if(node.getWeakSubject() != null)
        {
            node.getWeakSubject().apply(this);
        }
        if(node.getC0() != null)
        {
            node.getC0().apply(this);
        }
        if(node.getWeakActor() != null)
        {
            node.getWeakActor().apply(this);
        }
        if(node.getOpenRound() != null)
        {
            node.getOpenRound().apply(this);
        }
        if(node.getWeakauthTok() != null)
        {
            node.getWeakauthTok().apply(this);
        }
        outASimpleWeakauthClause(node);
    }

    public void inASimpleSecretPeer(ASimpleSecretPeer node)
    {
        defaultIn(node);
    }

    public void outASimpleSecretPeer(ASimpleSecretPeer node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleSecretPeer(ASimpleSecretPeer node)
    {
        inASimpleSecretPeer(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outASimpleSecretPeer(node);
    }

    public void inASimpleWeakActor(ASimpleWeakActor node)
    {
        defaultIn(node);
    }

    public void outASimpleWeakActor(ASimpleWeakActor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleWeakActor(ASimpleWeakActor node)
    {
        inASimpleWeakActor(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outASimpleWeakActor(node);
    }

    public void inASimpleWeakSubject(ASimpleWeakSubject node)
    {
        defaultIn(node);
    }

    public void outASimpleWeakSubject(ASimpleWeakSubject node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleWeakSubject(ASimpleWeakSubject node)
    {
        inASimpleWeakSubject(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outASimpleWeakSubject(node);
    }

    public void inASimpleNumber(ASimpleNumber node)
    {
        defaultIn(node);
    }

    public void outASimpleNumber(ASimpleNumber node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleNumber(ASimpleNumber node)
    {
        inASimpleNumber(node);
        if(node.getDigitSeq() != null)
        {
            node.getDigitSeq().apply(this);
        }
        outASimpleNumber(node);
    }

    public void inASimpleName(ASimpleName node)
    {
        defaultIn(node);
    }

    public void outASimpleName(ASimpleName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleName(ASimpleName node)
    {
        inASimpleName(node);
        if(node.getCharSeq() != null)
        {
            node.getCharSeq().apply(this);
        }
        outASimpleName(node);
    }
}
