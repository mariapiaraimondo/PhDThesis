/* This file was generated by SableCC (http://www.sablecc.org/). */

package protocol.node;

import protocol.analysis.*;

@SuppressWarnings("nls")
public final class AListAtomicList extends PAtomicList
{
    private PArgument _argument_;
    private TComma _comma_;
    private PAtomicList _atomicList_;

    public AListAtomicList()
    {
        // Constructor
    }

    public AListAtomicList(
        @SuppressWarnings("hiding") PArgument _argument_,
        @SuppressWarnings("hiding") TComma _comma_,
        @SuppressWarnings("hiding") PAtomicList _atomicList_)
    {
        // Constructor
        setArgument(_argument_);

        setComma(_comma_);

        setAtomicList(_atomicList_);

    }

    @Override
    public Object clone()
    {
        return new AListAtomicList(
            cloneNode(this._argument_),
            cloneNode(this._comma_),
            cloneNode(this._atomicList_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAListAtomicList(this);
    }

    public PArgument getArgument()
    {
        return this._argument_;
    }

    public void setArgument(PArgument node)
    {
        if(this._argument_ != null)
        {
            this._argument_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._argument_ = node;
    }

    public TComma getComma()
    {
        return this._comma_;
    }

    public void setComma(TComma node)
    {
        if(this._comma_ != null)
        {
            this._comma_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._comma_ = node;
    }

    public PAtomicList getAtomicList()
    {
        return this._atomicList_;
    }

    public void setAtomicList(PAtomicList node)
    {
        if(this._atomicList_ != null)
        {
            this._atomicList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._atomicList_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._argument_)
            + toString(this._comma_)
            + toString(this._atomicList_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._argument_ == child)
        {
            this._argument_ = null;
            return;
        }

        if(this._comma_ == child)
        {
            this._comma_ = null;
            return;
        }

        if(this._atomicList_ == child)
        {
            this._atomicList_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._argument_ == oldChild)
        {
            setArgument((PArgument) newChild);
            return;
        }

        if(this._comma_ == oldChild)
        {
            setComma((TComma) newChild);
            return;
        }

        if(this._atomicList_ == oldChild)
        {
            setAtomicList((PAtomicList) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
