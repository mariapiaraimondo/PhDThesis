/* This file was generated by SableCC (http://www.sablecc.org/). */

package protocol.node;

import protocol.analysis.*;

@SuppressWarnings("nls")
public final class ASimpleSecretClause extends PSecretClause
{
    private TSecretTok _secretTok_;
    private TOpenRound _openRound_;
    private PSecretPeer _s0_;
    private TComma _c0_;
    private PSecretPeer _s1_;
    private TComma _c1_;
    private PArgument _argument_;
    private TCloseRound _closeRound_;

    public ASimpleSecretClause()
    {
        // Constructor
    }

    public ASimpleSecretClause(
        @SuppressWarnings("hiding") TSecretTok _secretTok_,
        @SuppressWarnings("hiding") TOpenRound _openRound_,
        @SuppressWarnings("hiding") PSecretPeer _s0_,
        @SuppressWarnings("hiding") TComma _c0_,
        @SuppressWarnings("hiding") PSecretPeer _s1_,
        @SuppressWarnings("hiding") TComma _c1_,
        @SuppressWarnings("hiding") PArgument _argument_,
        @SuppressWarnings("hiding") TCloseRound _closeRound_)
    {
        // Constructor
        setSecretTok(_secretTok_);

        setOpenRound(_openRound_);

        setS0(_s0_);

        setC0(_c0_);

        setS1(_s1_);

        setC1(_c1_);

        setArgument(_argument_);

        setCloseRound(_closeRound_);

    }

    @Override
    public Object clone()
    {
        return new ASimpleSecretClause(
            cloneNode(this._secretTok_),
            cloneNode(this._openRound_),
            cloneNode(this._s0_),
            cloneNode(this._c0_),
            cloneNode(this._s1_),
            cloneNode(this._c1_),
            cloneNode(this._argument_),
            cloneNode(this._closeRound_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASimpleSecretClause(this);
    }

    public TSecretTok getSecretTok()
    {
        return this._secretTok_;
    }

    public void setSecretTok(TSecretTok node)
    {
        if(this._secretTok_ != null)
        {
            this._secretTok_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._secretTok_ = node;
    }

    public TOpenRound getOpenRound()
    {
        return this._openRound_;
    }

    public void setOpenRound(TOpenRound node)
    {
        if(this._openRound_ != null)
        {
            this._openRound_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._openRound_ = node;
    }

    public PSecretPeer getS0()
    {
        return this._s0_;
    }

    public void setS0(PSecretPeer node)
    {
        if(this._s0_ != null)
        {
            this._s0_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._s0_ = node;
    }

    public TComma getC0()
    {
        return this._c0_;
    }

    public void setC0(TComma node)
    {
        if(this._c0_ != null)
        {
            this._c0_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._c0_ = node;
    }

    public PSecretPeer getS1()
    {
        return this._s1_;
    }

    public void setS1(PSecretPeer node)
    {
        if(this._s1_ != null)
        {
            this._s1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._s1_ = node;
    }

    public TComma getC1()
    {
        return this._c1_;
    }

    public void setC1(TComma node)
    {
        if(this._c1_ != null)
        {
            this._c1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._c1_ = node;
    }

    public PArgument getArgument()
    {
        return this._argument_;
    }

    public void setArgument(PArgument node)
    {
        if(this._argument_ != null)
        {
            this._argument_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._argument_ = node;
    }

    public TCloseRound getCloseRound()
    {
        return this._closeRound_;
    }

    public void setCloseRound(TCloseRound node)
    {
        if(this._closeRound_ != null)
        {
            this._closeRound_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._closeRound_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._secretTok_)
            + toString(this._openRound_)
            + toString(this._s0_)
            + toString(this._c0_)
            + toString(this._s1_)
            + toString(this._c1_)
            + toString(this._argument_)
            + toString(this._closeRound_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._secretTok_ == child)
        {
            this._secretTok_ = null;
            return;
        }

        if(this._openRound_ == child)
        {
            this._openRound_ = null;
            return;
        }

        if(this._s0_ == child)
        {
            this._s0_ = null;
            return;
        }

        if(this._c0_ == child)
        {
            this._c0_ = null;
            return;
        }

        if(this._s1_ == child)
        {
            this._s1_ = null;
            return;
        }

        if(this._c1_ == child)
        {
            this._c1_ = null;
            return;
        }

        if(this._argument_ == child)
        {
            this._argument_ = null;
            return;
        }

        if(this._closeRound_ == child)
        {
            this._closeRound_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._secretTok_ == oldChild)
        {
            setSecretTok((TSecretTok) newChild);
            return;
        }

        if(this._openRound_ == oldChild)
        {
            setOpenRound((TOpenRound) newChild);
            return;
        }

        if(this._s0_ == oldChild)
        {
            setS0((PSecretPeer) newChild);
            return;
        }

        if(this._c0_ == oldChild)
        {
            setC0((TComma) newChild);
            return;
        }

        if(this._s1_ == oldChild)
        {
            setS1((PSecretPeer) newChild);
            return;
        }

        if(this._c1_ == oldChild)
        {
            setC1((TComma) newChild);
            return;
        }

        if(this._argument_ == oldChild)
        {
            setArgument((PArgument) newChild);
            return;
        }

        if(this._closeRound_ == oldChild)
        {
            setCloseRound((TCloseRound) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
