/* This file was generated by SableCC (http://www.sablecc.org/). */

package protocol.node;

import protocol.analysis.*;

@SuppressWarnings("nls")
public final class ASimpleWeakauthClause extends PWeakauthClause
{
    private TWeakauthTok _weakauthTok_;
    private TOpenRound _openRound_;
    private PWeakActor _weakActor_;
    private TComma _c0_;
    private PWeakSubject _weakSubject_;
    private TComma _c1_;
    private PArgument _argument_;
    private TCloseRound _closeRound_;

    public ASimpleWeakauthClause()
    {
        // Constructor
    }

    public ASimpleWeakauthClause(
        @SuppressWarnings("hiding") TWeakauthTok _weakauthTok_,
        @SuppressWarnings("hiding") TOpenRound _openRound_,
        @SuppressWarnings("hiding") PWeakActor _weakActor_,
        @SuppressWarnings("hiding") TComma _c0_,
        @SuppressWarnings("hiding") PWeakSubject _weakSubject_,
        @SuppressWarnings("hiding") TComma _c1_,
        @SuppressWarnings("hiding") PArgument _argument_,
        @SuppressWarnings("hiding") TCloseRound _closeRound_)
    {
        // Constructor
        setWeakauthTok(_weakauthTok_);

        setOpenRound(_openRound_);

        setWeakActor(_weakActor_);

        setC0(_c0_);

        setWeakSubject(_weakSubject_);

        setC1(_c1_);

        setArgument(_argument_);

        setCloseRound(_closeRound_);

    }

    @Override
    public Object clone()
    {
        return new ASimpleWeakauthClause(
            cloneNode(this._weakauthTok_),
            cloneNode(this._openRound_),
            cloneNode(this._weakActor_),
            cloneNode(this._c0_),
            cloneNode(this._weakSubject_),
            cloneNode(this._c1_),
            cloneNode(this._argument_),
            cloneNode(this._closeRound_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASimpleWeakauthClause(this);
    }

    public TWeakauthTok getWeakauthTok()
    {
        return this._weakauthTok_;
    }

    public void setWeakauthTok(TWeakauthTok node)
    {
        if(this._weakauthTok_ != null)
        {
            this._weakauthTok_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._weakauthTok_ = node;
    }

    public TOpenRound getOpenRound()
    {
        return this._openRound_;
    }

    public void setOpenRound(TOpenRound node)
    {
        if(this._openRound_ != null)
        {
            this._openRound_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._openRound_ = node;
    }

    public PWeakActor getWeakActor()
    {
        return this._weakActor_;
    }

    public void setWeakActor(PWeakActor node)
    {
        if(this._weakActor_ != null)
        {
            this._weakActor_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._weakActor_ = node;
    }

    public TComma getC0()
    {
        return this._c0_;
    }

    public void setC0(TComma node)
    {
        if(this._c0_ != null)
        {
            this._c0_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._c0_ = node;
    }

    public PWeakSubject getWeakSubject()
    {
        return this._weakSubject_;
    }

    public void setWeakSubject(PWeakSubject node)
    {
        if(this._weakSubject_ != null)
        {
            this._weakSubject_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._weakSubject_ = node;
    }

    public TComma getC1()
    {
        return this._c1_;
    }

    public void setC1(TComma node)
    {
        if(this._c1_ != null)
        {
            this._c1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._c1_ = node;
    }

    public PArgument getArgument()
    {
        return this._argument_;
    }

    public void setArgument(PArgument node)
    {
        if(this._argument_ != null)
        {
            this._argument_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._argument_ = node;
    }

    public TCloseRound getCloseRound()
    {
        return this._closeRound_;
    }

    public void setCloseRound(TCloseRound node)
    {
        if(this._closeRound_ != null)
        {
            this._closeRound_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._closeRound_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._weakauthTok_)
            + toString(this._openRound_)
            + toString(this._weakActor_)
            + toString(this._c0_)
            + toString(this._weakSubject_)
            + toString(this._c1_)
            + toString(this._argument_)
            + toString(this._closeRound_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._weakauthTok_ == child)
        {
            this._weakauthTok_ = null;
            return;
        }

        if(this._openRound_ == child)
        {
            this._openRound_ = null;
            return;
        }

        if(this._weakActor_ == child)
        {
            this._weakActor_ = null;
            return;
        }

        if(this._c0_ == child)
        {
            this._c0_ = null;
            return;
        }

        if(this._weakSubject_ == child)
        {
            this._weakSubject_ = null;
            return;
        }

        if(this._c1_ == child)
        {
            this._c1_ = null;
            return;
        }

        if(this._argument_ == child)
        {
            this._argument_ = null;
            return;
        }

        if(this._closeRound_ == child)
        {
            this._closeRound_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._weakauthTok_ == oldChild)
        {
            setWeakauthTok((TWeakauthTok) newChild);
            return;
        }

        if(this._openRound_ == oldChild)
        {
            setOpenRound((TOpenRound) newChild);
            return;
        }

        if(this._weakActor_ == oldChild)
        {
            setWeakActor((PWeakActor) newChild);
            return;
        }

        if(this._c0_ == oldChild)
        {
            setC0((TComma) newChild);
            return;
        }

        if(this._weakSubject_ == oldChild)
        {
            setWeakSubject((PWeakSubject) newChild);
            return;
        }

        if(this._c1_ == oldChild)
        {
            setC1((TComma) newChild);
            return;
        }

        if(this._argument_ == oldChild)
        {
            setArgument((PArgument) newChild);
            return;
        }

        if(this._closeRound_ == oldChild)
        {
            setCloseRound((TCloseRound) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
