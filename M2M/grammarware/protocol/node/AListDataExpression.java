/* This file was generated by SableCC (http://www.sablecc.org/). */

package protocol.node;

import protocol.analysis.*;

@SuppressWarnings("nls")
public final class AListDataExpression extends PDataExpression
{
    private TOpenCurly _openCurly_;
    private PAtomicList _atomicList_;
    private TCloseCurly _closeCurly_;
    private PDataFunction _dataFunction_;

    public AListDataExpression()
    {
        // Constructor
    }

    public AListDataExpression(
        @SuppressWarnings("hiding") TOpenCurly _openCurly_,
        @SuppressWarnings("hiding") PAtomicList _atomicList_,
        @SuppressWarnings("hiding") TCloseCurly _closeCurly_,
        @SuppressWarnings("hiding") PDataFunction _dataFunction_)
    {
        // Constructor
        setOpenCurly(_openCurly_);

        setAtomicList(_atomicList_);

        setCloseCurly(_closeCurly_);

        setDataFunction(_dataFunction_);

    }

    @Override
    public Object clone()
    {
        return new AListDataExpression(
            cloneNode(this._openCurly_),
            cloneNode(this._atomicList_),
            cloneNode(this._closeCurly_),
            cloneNode(this._dataFunction_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAListDataExpression(this);
    }

    public TOpenCurly getOpenCurly()
    {
        return this._openCurly_;
    }

    public void setOpenCurly(TOpenCurly node)
    {
        if(this._openCurly_ != null)
        {
            this._openCurly_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._openCurly_ = node;
    }

    public PAtomicList getAtomicList()
    {
        return this._atomicList_;
    }

    public void setAtomicList(PAtomicList node)
    {
        if(this._atomicList_ != null)
        {
            this._atomicList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._atomicList_ = node;
    }

    public TCloseCurly getCloseCurly()
    {
        return this._closeCurly_;
    }

    public void setCloseCurly(TCloseCurly node)
    {
        if(this._closeCurly_ != null)
        {
            this._closeCurly_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._closeCurly_ = node;
    }

    public PDataFunction getDataFunction()
    {
        return this._dataFunction_;
    }

    public void setDataFunction(PDataFunction node)
    {
        if(this._dataFunction_ != null)
        {
            this._dataFunction_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._dataFunction_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._openCurly_)
            + toString(this._atomicList_)
            + toString(this._closeCurly_)
            + toString(this._dataFunction_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._openCurly_ == child)
        {
            this._openCurly_ = null;
            return;
        }

        if(this._atomicList_ == child)
        {
            this._atomicList_ = null;
            return;
        }

        if(this._closeCurly_ == child)
        {
            this._closeCurly_ = null;
            return;
        }

        if(this._dataFunction_ == child)
        {
            this._dataFunction_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._openCurly_ == oldChild)
        {
            setOpenCurly((TOpenCurly) newChild);
            return;
        }

        if(this._atomicList_ == oldChild)
        {
            setAtomicList((PAtomicList) newChild);
            return;
        }

        if(this._closeCurly_ == oldChild)
        {
            setCloseCurly((TCloseCurly) newChild);
            return;
        }

        if(this._dataFunction_ == oldChild)
        {
            setDataFunction((PDataFunction) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
