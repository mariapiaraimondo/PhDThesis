/* This file was generated by SableCC (http://www.sablecc.org/). */

package protocol.node;

import protocol.analysis.*;

@SuppressWarnings("nls")
public final class ASimpleFreshClause extends PFreshClause
{
    private TFreshTok _freshTok_;
    private TOpenRound _openRound_;
    private PNumber _number_;
    private TCloseRound _closeRound_;

    public ASimpleFreshClause()
    {
        // Constructor
    }

    public ASimpleFreshClause(
        @SuppressWarnings("hiding") TFreshTok _freshTok_,
        @SuppressWarnings("hiding") TOpenRound _openRound_,
        @SuppressWarnings("hiding") PNumber _number_,
        @SuppressWarnings("hiding") TCloseRound _closeRound_)
    {
        // Constructor
        setFreshTok(_freshTok_);

        setOpenRound(_openRound_);

        setNumber(_number_);

        setCloseRound(_closeRound_);

    }

    @Override
    public Object clone()
    {
        return new ASimpleFreshClause(
            cloneNode(this._freshTok_),
            cloneNode(this._openRound_),
            cloneNode(this._number_),
            cloneNode(this._closeRound_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASimpleFreshClause(this);
    }

    public TFreshTok getFreshTok()
    {
        return this._freshTok_;
    }

    public void setFreshTok(TFreshTok node)
    {
        if(this._freshTok_ != null)
        {
            this._freshTok_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._freshTok_ = node;
    }

    public TOpenRound getOpenRound()
    {
        return this._openRound_;
    }

    public void setOpenRound(TOpenRound node)
    {
        if(this._openRound_ != null)
        {
            this._openRound_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._openRound_ = node;
    }

    public PNumber getNumber()
    {
        return this._number_;
    }

    public void setNumber(PNumber node)
    {
        if(this._number_ != null)
        {
            this._number_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._number_ = node;
    }

    public TCloseRound getCloseRound()
    {
        return this._closeRound_;
    }

    public void setCloseRound(TCloseRound node)
    {
        if(this._closeRound_ != null)
        {
            this._closeRound_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._closeRound_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._freshTok_)
            + toString(this._openRound_)
            + toString(this._number_)
            + toString(this._closeRound_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._freshTok_ == child)
        {
            this._freshTok_ = null;
            return;
        }

        if(this._openRound_ == child)
        {
            this._openRound_ = null;
            return;
        }

        if(this._number_ == child)
        {
            this._number_ = null;
            return;
        }

        if(this._closeRound_ == child)
        {
            this._closeRound_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._freshTok_ == oldChild)
        {
            setFreshTok((TFreshTok) newChild);
            return;
        }

        if(this._openRound_ == oldChild)
        {
            setOpenRound((TOpenRound) newChild);
            return;
        }

        if(this._number_ == oldChild)
        {
            setNumber((PNumber) newChild);
            return;
        }

        if(this._closeRound_ == oldChild)
        {
            setCloseRound((TCloseRound) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
