/* This file was generated by SableCC (http://www.sablecc.org/). */

package protocol.parser;

import protocol.lexer.*;
import protocol.node.*;
import protocol.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PDataCondition node1 = (PDataCondition) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce ADataDataCondition */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce AConditionDataCondition */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list, false);
            }
            break;
            case 2: /* reduce ASimpleDataClause */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list, false);
            }
            break;
            case 3: /* reduce AListDataClause */
            {
                ArrayList<Object> list = new3();
                push(goTo(1), list, false);
            }
            break;
            case 4: /* reduce AAlistdataexpression1DataExpression */
            {
                ArrayList<Object> list = new4();
                push(goTo(2), list, false);
            }
            break;
            case 5: /* reduce AAlistdataexpression2DataExpression */
            {
                ArrayList<Object> list = new5();
                push(goTo(2), list, false);
            }
            break;
            case 6: /* reduce ASimpleAtomicList */
            {
                ArrayList<Object> list = new6();
                push(goTo(3), list, false);
            }
            break;
            case 7: /* reduce AListAtomicList */
            {
                ArrayList<Object> list = new7();
                push(goTo(3), list, false);
            }
            break;
            case 8: /* reduce AVariableArgument */
            {
                ArrayList<Object> list = new8();
                push(goTo(4), list, false);
            }
            break;
            case 9: /* reduce AFunctionArgument */
            {
                ArrayList<Object> list = new9();
                push(goTo(4), list, false);
            }
            break;
            case 10: /* reduce ARecursiveArgument */
            {
                ArrayList<Object> list = new10();
                push(goTo(4), list, false);
            }
            break;
            case 11: /* reduce AEmptyFunction */
            {
                ArrayList<Object> list = new11();
                push(goTo(5), list, false);
            }
            break;
            case 12: /* reduce AHashFunction */
            {
                ArrayList<Object> list = new12();
                push(goTo(5), list, false);
            }
            break;
            case 13: /* reduce AIdFunction */
            {
                ArrayList<Object> list = new13();
                push(goTo(5), list, false);
            }
            break;
            case 14: /* reduce AFreshFunction */
            {
                ArrayList<Object> list = new14();
                push(goTo(5), list, false);
            }
            break;
            case 15: /* reduce APubkeyFunction */
            {
                ArrayList<Object> list = new15();
                push(goTo(5), list, false);
            }
            break;
            case 16: /* reduce ASignatureFunction */
            {
                ArrayList<Object> list = new16();
                push(goTo(5), list, false);
            }
            break;
            case 17: /* reduce APubkeyDataFunction */
            {
                ArrayList<Object> list = new17();
                push(goTo(6), list, false);
            }
            break;
            case 18: /* reduce ASignatureDataFunction */
            {
                ArrayList<Object> list = new18();
                push(goTo(6), list, false);
            }
            break;
            case 19: /* reduce ASimpleIdClause */
            {
                ArrayList<Object> list = new19();
                push(goTo(7), list, false);
            }
            break;
            case 20: /* reduce ASimpleFreshClause */
            {
                ArrayList<Object> list = new20();
                push(goTo(8), list, false);
            }
            break;
            case 21: /* reduce ASimpleHashClause */
            {
                ArrayList<Object> list = new21();
                push(goTo(9), list, false);
            }
            break;
            case 22: /* reduce ASimplePubkeyClause */
            {
                ArrayList<Object> list = new22();
                push(goTo(10), list, false);
            }
            break;
            case 23: /* reduce ASimpleSignatureClause */
            {
                ArrayList<Object> list = new23();
                push(goTo(11), list, false);
            }
            break;
            case 24: /* reduce ASecretConditionClause */
            {
                ArrayList<Object> list = new24();
                push(goTo(12), list, false);
            }
            break;
            case 25: /* reduce AWauthConditionClause */
            {
                ArrayList<Object> list = new25();
                push(goTo(12), list, false);
            }
            break;
            case 26: /* reduce ASimpleSecretClause */
            {
                ArrayList<Object> list = new26();
                push(goTo(13), list, false);
            }
            break;
            case 27: /* reduce ASimpleWeakauthClause */
            {
                ArrayList<Object> list = new27();
                push(goTo(14), list, false);
            }
            break;
            case 28: /* reduce ASimpleSecretPeer */
            {
                ArrayList<Object> list = new28();
                push(goTo(15), list, false);
            }
            break;
            case 29: /* reduce ASimpleWeakActor */
            {
                ArrayList<Object> list = new29();
                push(goTo(16), list, false);
            }
            break;
            case 30: /* reduce ASimpleWeakSubject */
            {
                ArrayList<Object> list = new30();
                push(goTo(17), list, false);
            }
            break;
            case 31: /* reduce ASimpleNumber */
            {
                ArrayList<Object> list = new31();
                push(goTo(18), list, false);
            }
            break;
            case 32: /* reduce ASimpleName */
            {
                ArrayList<Object> list = new32();
                push(goTo(19), list, false);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce ADataDataCondition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDataCondition pdataconditionNode1;
        {
            // Block
        PDataClause pdataclauseNode2;
        pdataclauseNode2 = (PDataClause)nodeArrayList1.get(0);

        pdataconditionNode1 = new ADataDataCondition(pdataclauseNode2);
        }
	nodeList.add(pdataconditionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AConditionDataCondition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDataCondition pdataconditionNode1;
        {
            // Block
        PConditionClause pconditionclauseNode2;
        pconditionclauseNode2 = (PConditionClause)nodeArrayList1.get(0);

        pdataconditionNode1 = new AConditionDataCondition(pconditionclauseNode2);
        }
	nodeList.add(pdataconditionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce ASimpleDataClause */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDataClause pdataclauseNode1;
        {
            // Block
        PDataExpression pdataexpressionNode2;
        pdataexpressionNode2 = (PDataExpression)nodeArrayList1.get(0);

        pdataclauseNode1 = new ASimpleDataClause(pdataexpressionNode2);
        }
	nodeList.add(pdataclauseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AListDataClause */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDataClause pdataclauseNode1;
        {
            // Block
        PDataExpression pdataexpressionNode2;
        TComma tcommaNode3;
        PDataClause pdataclauseNode4;
        pdataexpressionNode2 = (PDataExpression)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        pdataclauseNode4 = (PDataClause)nodeArrayList3.get(0);

        pdataclauseNode1 = new AListDataClause(pdataexpressionNode2, tcommaNode3, pdataclauseNode4);
        }
	nodeList.add(pdataclauseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AAlistdataexpression1DataExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDataExpression pdataexpressionNode1;
        {
            // Block
        TOpenCurly topencurlyNode2;
        PAtomicList patomiclistNode3;
        TCloseCurly tclosecurlyNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        topencurlyNode2 = (TOpenCurly)nodeArrayList1.get(0);
        patomiclistNode3 = (PAtomicList)nodeArrayList2.get(0);
        tclosecurlyNode4 = (TCloseCurly)nodeArrayList3.get(0);

        pdataexpressionNode1 = new AListDataExpression(topencurlyNode2, patomiclistNode3, tclosecurlyNode4, null);
        }
	nodeList.add(pdataexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AAlistdataexpression2DataExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDataExpression pdataexpressionNode1;
        {
            // Block
        TOpenCurly topencurlyNode2;
        PAtomicList patomiclistNode3;
        TCloseCurly tclosecurlyNode4;
        PDataFunction pdatafunctionNode5;
        topencurlyNode2 = (TOpenCurly)nodeArrayList1.get(0);
        patomiclistNode3 = (PAtomicList)nodeArrayList2.get(0);
        tclosecurlyNode4 = (TCloseCurly)nodeArrayList3.get(0);
        pdatafunctionNode5 = (PDataFunction)nodeArrayList4.get(0);

        pdataexpressionNode1 = new AListDataExpression(topencurlyNode2, patomiclistNode3, tclosecurlyNode4, pdatafunctionNode5);
        }
	nodeList.add(pdataexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce ASimpleAtomicList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAtomicList patomiclistNode1;
        {
            // Block
        PArgument pargumentNode2;
        pargumentNode2 = (PArgument)nodeArrayList1.get(0);

        patomiclistNode1 = new ASimpleAtomicList(pargumentNode2);
        }
	nodeList.add(patomiclistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AListAtomicList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAtomicList patomiclistNode1;
        {
            // Block
        PArgument pargumentNode2;
        TComma tcommaNode3;
        PAtomicList patomiclistNode4;
        pargumentNode2 = (PArgument)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        patomiclistNode4 = (PAtomicList)nodeArrayList3.get(0);

        patomiclistNode1 = new AListAtomicList(pargumentNode2, tcommaNode3, patomiclistNode4);
        }
	nodeList.add(patomiclistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AVariableArgument */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArgument pargumentNode1;
        {
            // Block
        PName pnameNode2;
        pnameNode2 = (PName)nodeArrayList1.get(0);

        pargumentNode1 = new AVariableArgument(pnameNode2);
        }
	nodeList.add(pargumentNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AFunctionArgument */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArgument pargumentNode1;
        {
            // Block
        PFunction pfunctionNode2;
        pfunctionNode2 = (PFunction)nodeArrayList1.get(0);

        pargumentNode1 = new AFunctionArgument(pfunctionNode2);
        }
	nodeList.add(pargumentNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce ARecursiveArgument */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArgument pargumentNode1;
        {
            // Block
        PDataExpression pdataexpressionNode2;
        pdataexpressionNode2 = (PDataExpression)nodeArrayList1.get(0);

        pargumentNode1 = new ARecursiveArgument(pdataexpressionNode2);
        }
	nodeList.add(pargumentNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AEmptyFunction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunction pfunctionNode1;
        {
            // Block
        TEmptyTok temptytokNode2;
        temptytokNode2 = (TEmptyTok)nodeArrayList1.get(0);

        pfunctionNode1 = new AEmptyFunction(temptytokNode2);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AHashFunction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunction pfunctionNode1;
        {
            // Block
        PHashClause phashclauseNode2;
        phashclauseNode2 = (PHashClause)nodeArrayList1.get(0);

        pfunctionNode1 = new AHashFunction(phashclauseNode2);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AIdFunction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunction pfunctionNode1;
        {
            // Block
        PIdClause pidclauseNode2;
        pidclauseNode2 = (PIdClause)nodeArrayList1.get(0);

        pfunctionNode1 = new AIdFunction(pidclauseNode2);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AFreshFunction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunction pfunctionNode1;
        {
            // Block
        PFreshClause pfreshclauseNode2;
        pfreshclauseNode2 = (PFreshClause)nodeArrayList1.get(0);

        pfunctionNode1 = new AFreshFunction(pfreshclauseNode2);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce APubkeyFunction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunction pfunctionNode1;
        {
            // Block
        PPubkeyClause ppubkeyclauseNode2;
        ppubkeyclauseNode2 = (PPubkeyClause)nodeArrayList1.get(0);

        pfunctionNode1 = new APubkeyFunction(ppubkeyclauseNode2);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce ASignatureFunction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunction pfunctionNode1;
        {
            // Block
        PSignatureClause psignatureclauseNode2;
        psignatureclauseNode2 = (PSignatureClause)nodeArrayList1.get(0);

        pfunctionNode1 = new ASignatureFunction(psignatureclauseNode2);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce APubkeyDataFunction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDataFunction pdatafunctionNode1;
        {
            // Block
        PPubkeyClause ppubkeyclauseNode2;
        ppubkeyclauseNode2 = (PPubkeyClause)nodeArrayList1.get(0);

        pdatafunctionNode1 = new APubkeyDataFunction(ppubkeyclauseNode2);
        }
	nodeList.add(pdatafunctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce ASignatureDataFunction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDataFunction pdatafunctionNode1;
        {
            // Block
        PSignatureClause psignatureclauseNode2;
        psignatureclauseNode2 = (PSignatureClause)nodeArrayList1.get(0);

        pdatafunctionNode1 = new ASignatureDataFunction(psignatureclauseNode2);
        }
	nodeList.add(pdatafunctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce ASimpleIdClause */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIdClause pidclauseNode1;
        {
            // Block
        TIdTok tidtokNode2;
        TOpenRound topenroundNode3;
        PArgument pargumentNode4;
        TCloseRound tcloseroundNode5;
        tidtokNode2 = (TIdTok)nodeArrayList1.get(0);
        topenroundNode3 = (TOpenRound)nodeArrayList2.get(0);
        pargumentNode4 = (PArgument)nodeArrayList3.get(0);
        tcloseroundNode5 = (TCloseRound)nodeArrayList4.get(0);

        pidclauseNode1 = new ASimpleIdClause(tidtokNode2, topenroundNode3, pargumentNode4, tcloseroundNode5);
        }
	nodeList.add(pidclauseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce ASimpleFreshClause */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFreshClause pfreshclauseNode1;
        {
            // Block
        TFreshTok tfreshtokNode2;
        TOpenRound topenroundNode3;
        PNumber pnumberNode4;
        TCloseRound tcloseroundNode5;
        tfreshtokNode2 = (TFreshTok)nodeArrayList1.get(0);
        topenroundNode3 = (TOpenRound)nodeArrayList2.get(0);
        pnumberNode4 = (PNumber)nodeArrayList3.get(0);
        tcloseroundNode5 = (TCloseRound)nodeArrayList4.get(0);

        pfreshclauseNode1 = new ASimpleFreshClause(tfreshtokNode2, topenroundNode3, pnumberNode4, tcloseroundNode5);
        }
	nodeList.add(pfreshclauseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce ASimpleHashClause */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PHashClause phashclauseNode1;
        {
            // Block
        THashTok thashtokNode2;
        TOpenRound topenroundNode3;
        PArgument pargumentNode4;
        TCloseRound tcloseroundNode5;
        thashtokNode2 = (THashTok)nodeArrayList1.get(0);
        topenroundNode3 = (TOpenRound)nodeArrayList2.get(0);
        pargumentNode4 = (PArgument)nodeArrayList3.get(0);
        tcloseroundNode5 = (TCloseRound)nodeArrayList4.get(0);

        phashclauseNode1 = new ASimpleHashClause(thashtokNode2, topenroundNode3, pargumentNode4, tcloseroundNode5);
        }
	nodeList.add(phashclauseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce ASimplePubkeyClause */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPubkeyClause ppubkeyclauseNode1;
        {
            // Block
        TPubkeyTok tpubkeytokNode2;
        TOpenRound topenroundNode3;
        PArgument pargumentNode4;
        TCloseRound tcloseroundNode5;
        tpubkeytokNode2 = (TPubkeyTok)nodeArrayList1.get(0);
        topenroundNode3 = (TOpenRound)nodeArrayList2.get(0);
        pargumentNode4 = (PArgument)nodeArrayList3.get(0);
        tcloseroundNode5 = (TCloseRound)nodeArrayList4.get(0);

        ppubkeyclauseNode1 = new ASimplePubkeyClause(tpubkeytokNode2, topenroundNode3, pargumentNode4, tcloseroundNode5);
        }
	nodeList.add(ppubkeyclauseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce ASimpleSignatureClause */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSignatureClause psignatureclauseNode1;
        {
            // Block
        TSignatureTok tsignaturetokNode2;
        TOpenRound topenroundNode3;
        PArgument pargumentNode4;
        TCloseRound tcloseroundNode5;
        tsignaturetokNode2 = (TSignatureTok)nodeArrayList1.get(0);
        topenroundNode3 = (TOpenRound)nodeArrayList2.get(0);
        pargumentNode4 = (PArgument)nodeArrayList3.get(0);
        tcloseroundNode5 = (TCloseRound)nodeArrayList4.get(0);

        psignatureclauseNode1 = new ASimpleSignatureClause(tsignaturetokNode2, topenroundNode3, pargumentNode4, tcloseroundNode5);
        }
	nodeList.add(psignatureclauseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce ASecretConditionClause */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConditionClause pconditionclauseNode1;
        {
            // Block
        PSecretClause psecretclauseNode2;
        psecretclauseNode2 = (PSecretClause)nodeArrayList1.get(0);

        pconditionclauseNode1 = new ASecretConditionClause(psecretclauseNode2);
        }
	nodeList.add(pconditionclauseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AWauthConditionClause */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConditionClause pconditionclauseNode1;
        {
            // Block
        PWeakauthClause pweakauthclauseNode2;
        pweakauthclauseNode2 = (PWeakauthClause)nodeArrayList1.get(0);

        pconditionclauseNode1 = new AWauthConditionClause(pweakauthclauseNode2);
        }
	nodeList.add(pconditionclauseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce ASimpleSecretClause */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSecretClause psecretclauseNode1;
        {
            // Block
        TSecretTok tsecrettokNode2;
        TOpenRound topenroundNode3;
        PSecretPeer psecretpeerNode4;
        TComma tcommaNode5;
        PSecretPeer psecretpeerNode6;
        TComma tcommaNode7;
        PArgument pargumentNode8;
        TCloseRound tcloseroundNode9;
        tsecrettokNode2 = (TSecretTok)nodeArrayList1.get(0);
        topenroundNode3 = (TOpenRound)nodeArrayList2.get(0);
        psecretpeerNode4 = (PSecretPeer)nodeArrayList3.get(0);
        tcommaNode5 = (TComma)nodeArrayList4.get(0);
        psecretpeerNode6 = (PSecretPeer)nodeArrayList5.get(0);
        tcommaNode7 = (TComma)nodeArrayList6.get(0);
        pargumentNode8 = (PArgument)nodeArrayList7.get(0);
        tcloseroundNode9 = (TCloseRound)nodeArrayList8.get(0);

        psecretclauseNode1 = new ASimpleSecretClause(tsecrettokNode2, topenroundNode3, psecretpeerNode4, tcommaNode5, psecretpeerNode6, tcommaNode7, pargumentNode8, tcloseroundNode9);
        }
	nodeList.add(psecretclauseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce ASimpleWeakauthClause */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PWeakauthClause pweakauthclauseNode1;
        {
            // Block
        TWeakauthTok tweakauthtokNode2;
        TOpenRound topenroundNode3;
        PWeakActor pweakactorNode4;
        TComma tcommaNode5;
        PWeakSubject pweaksubjectNode6;
        TComma tcommaNode7;
        PArgument pargumentNode8;
        TCloseRound tcloseroundNode9;
        tweakauthtokNode2 = (TWeakauthTok)nodeArrayList1.get(0);
        topenroundNode3 = (TOpenRound)nodeArrayList2.get(0);
        pweakactorNode4 = (PWeakActor)nodeArrayList3.get(0);
        tcommaNode5 = (TComma)nodeArrayList4.get(0);
        pweaksubjectNode6 = (PWeakSubject)nodeArrayList5.get(0);
        tcommaNode7 = (TComma)nodeArrayList6.get(0);
        pargumentNode8 = (PArgument)nodeArrayList7.get(0);
        tcloseroundNode9 = (TCloseRound)nodeArrayList8.get(0);

        pweakauthclauseNode1 = new ASimpleWeakauthClause(tweakauthtokNode2, topenroundNode3, pweakactorNode4, tcommaNode5, pweaksubjectNode6, tcommaNode7, pargumentNode8, tcloseroundNode9);
        }
	nodeList.add(pweakauthclauseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce ASimpleSecretPeer */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSecretPeer psecretpeerNode1;
        {
            // Block
        PName pnameNode2;
        pnameNode2 = (PName)nodeArrayList1.get(0);

        psecretpeerNode1 = new ASimpleSecretPeer(pnameNode2);
        }
	nodeList.add(psecretpeerNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce ASimpleWeakActor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PWeakActor pweakactorNode1;
        {
            // Block
        PName pnameNode2;
        pnameNode2 = (PName)nodeArrayList1.get(0);

        pweakactorNode1 = new ASimpleWeakActor(pnameNode2);
        }
	nodeList.add(pweakactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce ASimpleWeakSubject */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PWeakSubject pweaksubjectNode1;
        {
            // Block
        PName pnameNode2;
        pnameNode2 = (PName)nodeArrayList1.get(0);

        pweaksubjectNode1 = new ASimpleWeakSubject(pnameNode2);
        }
	nodeList.add(pweaksubjectNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce ASimpleNumber */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNumber pnumberNode1;
        {
            // Block
        TDigitSeq tdigitseqNode2;
        tdigitseqNode2 = (TDigitSeq)nodeArrayList1.get(0);

        pnumberNode1 = new ASimpleNumber(tdigitseqNode2);
        }
	nodeList.add(pnumberNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce ASimpleName */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PName pnameNode1;
        {
            // Block
        TCharSeq tcharseqNode2;
        tcharseqNode2 = (TCharSeq)nodeArrayList1.get(0);

        pnameNode1 = new ASimpleName(tcharseqNode2);
        }
	nodeList.add(pnameNode1);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {5, SHIFT, 1}, {13, SHIFT, 2}, {14, SHIFT, 3}, },
			{{-1, ERROR, 1}, {5, SHIFT, 1}, {7, SHIFT, 10}, {8, SHIFT, 11}, {9, SHIFT, 12}, {10, SHIFT, 13}, {11, SHIFT, 14}, {12, SHIFT, 15}, {16, SHIFT, 16}, },
			{{-1, ERROR, 2}, {1, SHIFT, 27}, },
			{{-1, ERROR, 3}, {1, SHIFT, 28}, },
			{{-1, ERROR, 4}, {17, ACCEPT, -1}, },
			{{-1, REDUCE, 0}, },
			{{-1, REDUCE, 2}, {0, SHIFT, 29}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 25}, },
			{{-1, ERROR, 10}, {1, SHIFT, 30}, },
			{{-1, ERROR, 11}, {1, SHIFT, 31}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 13}, {1, SHIFT, 32}, },
			{{-1, ERROR, 14}, {1, SHIFT, 33}, },
			{{-1, ERROR, 15}, {1, SHIFT, 34}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 10}, },
			{{-1, ERROR, 18}, {6, SHIFT, 35}, },
			{{-1, REDUCE, 6}, {0, SHIFT, 36}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 8}, },
			{{-1, ERROR, 27}, {16, SHIFT, 16}, },
			{{-1, ERROR, 28}, {16, SHIFT, 16}, },
			{{-1, ERROR, 29}, {5, SHIFT, 1}, },
			{{-1, ERROR, 30}, {15, SHIFT, 42}, },
			{{-1, ERROR, 31}, {5, SHIFT, 1}, {7, SHIFT, 10}, {8, SHIFT, 11}, {9, SHIFT, 12}, {10, SHIFT, 13}, {11, SHIFT, 14}, {12, SHIFT, 15}, {16, SHIFT, 16}, },
			{{-1, ERROR, 32}, {5, SHIFT, 1}, {7, SHIFT, 10}, {8, SHIFT, 11}, {9, SHIFT, 12}, {10, SHIFT, 13}, {11, SHIFT, 14}, {12, SHIFT, 15}, {16, SHIFT, 16}, },
			{{-1, ERROR, 33}, {5, SHIFT, 1}, {7, SHIFT, 10}, {8, SHIFT, 11}, {9, SHIFT, 12}, {10, SHIFT, 13}, {11, SHIFT, 14}, {12, SHIFT, 15}, {16, SHIFT, 16}, },
			{{-1, ERROR, 34}, {5, SHIFT, 1}, {7, SHIFT, 10}, {8, SHIFT, 11}, {9, SHIFT, 12}, {10, SHIFT, 13}, {11, SHIFT, 14}, {12, SHIFT, 15}, {16, SHIFT, 16}, },
			{{-1, REDUCE, 4}, {10, SHIFT, 13}, {12, SHIFT, 15}, },
			{{-1, ERROR, 36}, {5, SHIFT, 1}, {7, SHIFT, 10}, {8, SHIFT, 11}, {9, SHIFT, 12}, {10, SHIFT, 13}, {11, SHIFT, 14}, {12, SHIFT, 15}, {16, SHIFT, 16}, },
			{{-1, ERROR, 37}, {0, SHIFT, 52}, },
			{{-1, REDUCE, 29}, },
			{{-1, ERROR, 39}, {0, SHIFT, 53}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 31}, },
			{{-1, ERROR, 43}, {2, SHIFT, 54}, },
			{{-1, ERROR, 44}, {2, SHIFT, 55}, },
			{{-1, ERROR, 45}, {2, SHIFT, 56}, },
			{{-1, ERROR, 46}, {2, SHIFT, 57}, },
			{{-1, ERROR, 47}, {2, SHIFT, 58}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 7}, },
			{{-1, ERROR, 52}, {16, SHIFT, 16}, },
			{{-1, ERROR, 53}, {16, SHIFT, 16}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 23}, },
			{{-1, ERROR, 59}, {0, SHIFT, 62}, },
			{{-1, REDUCE, 30}, },
			{{-1, ERROR, 61}, {0, SHIFT, 63}, },
			{{-1, ERROR, 62}, {5, SHIFT, 1}, {7, SHIFT, 10}, {8, SHIFT, 11}, {9, SHIFT, 12}, {10, SHIFT, 13}, {11, SHIFT, 14}, {12, SHIFT, 15}, {16, SHIFT, 16}, },
			{{-1, ERROR, 63}, {5, SHIFT, 1}, {7, SHIFT, 10}, {8, SHIFT, 11}, {9, SHIFT, 12}, {10, SHIFT, 13}, {11, SHIFT, 14}, {12, SHIFT, 15}, {16, SHIFT, 16}, },
			{{-1, ERROR, 64}, {2, SHIFT, 66}, },
			{{-1, ERROR, 65}, {2, SHIFT, 67}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 26}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 4}, },
			{{-1, 5}, {29, 41}, },
			{{-1, 17}, {0, 6}, {29, 6}, },
			{{-1, 18}, {36, 51}, },
			{{-1, 19}, {31, 44}, {32, 45}, {33, 46}, {34, 47}, {62, 64}, {63, 65}, },
			{{-1, 20}, },
			{{-1, 48}, },
			{{-1, 21}, },
			{{-1, 22}, },
			{{-1, 23}, },
			{{-1, 24}, {35, 49}, },
			{{-1, 25}, {35, 50}, },
			{{-1, 7}, },
			{{-1, 8}, },
			{{-1, 9}, },
			{{-1, 39}, {53, 61}, },
			{{-1, 37}, },
			{{-1, 59}, },
			{{-1, 43}, },
			{{-1, 26}, {27, 38}, {28, 40}, {52, 60}, {53, 40}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: '{', 'weakauthentication', 'secret'",
			"expecting: '{', 'fresh', 'id', 'empty()', 'pubkey', 'hash', 'signkey', char seq",
			"expecting: '('",
			"expecting: EOF",
			"expecting: ',', EOF",
			"expecting: ',', ')', '}'",
			"expecting: '}'",
			"expecting: ',', '}'",
			"expecting: char seq",
			"expecting: '{'",
			"expecting: digit seq",
			"expecting: ',', ')', '}', 'pubkey', 'signkey', EOF",
			"expecting: ','",
			"expecting: ')'",
			"expecting: ',', ')', '}', EOF",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 2, 3, 3, 4, 3, 3, 3, 2, 2, 5, 2, 2, 2, 5, 5, 6, 7, 5, 5, 5, 5, 5, 5, 5, 8, 8, 9, 10, 1, 1, 1, 1, 11, 1, 12, 12, 12, 12, 3, 13, 13, 13, 13, 13, 13, 14, 14, 14, 6, 8, 8, 5, 5, 14, 5, 14, 12, 12, 12, 1, 1, 13, 13, 3, 3, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
